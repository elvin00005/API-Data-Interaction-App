{"ast":null,"code":"var _s = $RefreshSig$();\nimport { usePosts } from \"../context/postsContext\";\nimport { useFavorite } from \"../context/favoritiesPostsContext\";\nimport { useMemo, useState } from \"react\";\nexport function useFilterPosts() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [sortConfig, setSortConfig] = useState(null);\n  const {\n    favoritePosts,\n    showFavorites,\n    setShowFavorites\n  } = useFavorite();\n  const {\n    posts\n  } = usePosts();\n  const uniqueUsers = Array.from(new Set(posts.map(post => post.user.id))).map(id => {\n    return posts.find(post => post.user.id === id).user;\n  });\n  const userOptions = uniqueUsers.map(user => ({\n    label: user.name,\n    value: user.id\n  }));\n  const filterPosts = posts => {\n    return posts.filter(post => {\n      const titleMatch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n      const userMatch = selectedUsers.length === 0 || selectedUsers.find(user => user.value === post.userId);\n      const favoriteMatch = showFavorites ? favoritePosts.includes(post.id) : true;\n      return titleMatch && userMatch && favoriteMatch;\n    });\n  };\n  const filteredPosts = filterPosts(posts);\n  const sortedPosts = useMemo(() => {\n    let sortablePosts = [...filteredPosts];\n    if (sortConfig !== null) {\n      sortablePosts.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortablePosts;\n  }, [filteredPosts, sortConfig]);\n  const requestSort = key => {\n    let direction = \"ascending\";\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n  return {\n    sortedPosts,\n    requestSort,\n    filteredPosts,\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites\n  };\n}\n_s(useFilterPosts, \"7l+6WteI8fBD/T8CKXBnwioo25o=\", false, function () {\n  return [useFavorite, usePosts];\n});","map":{"version":3,"names":["usePosts","useFavorite","useMemo","useState","useFilterPosts","_s","searchTerm","setSearchTerm","selectedUsers","setSelectedUsers","sortConfig","setSortConfig","favoritePosts","showFavorites","setShowFavorites","posts","uniqueUsers","Array","from","Set","map","post","user","id","find","userOptions","label","name","value","filterPosts","filter","titleMatch","title","toLowerCase","includes","userMatch","length","userId","favoriteMatch","filteredPosts","sortedPosts","sortablePosts","sort","a","b","key","direction","requestSort"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useFilterPosts.js"],"sourcesContent":["import { usePosts } from \"../context/postsContext\";\nimport { useFavorite } from \"../context/favoritiesPostsContext\";\nimport { useMemo, useState } from \"react\";\n\nexport function useFilterPosts() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [sortConfig, setSortConfig] = useState(null);\n\n  const { favoritePosts, showFavorites, setShowFavorites } = useFavorite();\n\n  const { posts } = usePosts();\n\n  const uniqueUsers = Array.from(\n    new Set(posts.map((post) => post.user.id))\n  ).map((id) => {\n    return posts.find((post) => post.user.id === id).user;\n  });\n\n  const userOptions = uniqueUsers.map((user) => ({\n    label: user.name,\n    value: user.id,\n  }));\n\n  const filterPosts = (posts) => {\n    return posts.filter((post) => {\n      const titleMatch = post.title\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase());\n\n      const userMatch =\n        selectedUsers.length === 0 ||\n        selectedUsers.find((user) => user.value === post.userId);\n      const favoriteMatch = showFavorites\n        ? favoritePosts.includes(post.id)\n        : true;\n      return titleMatch && userMatch && favoriteMatch;\n    });\n  };\n  const filteredPosts = filterPosts(posts);\n\n  const sortedPosts = useMemo(() => {\n    let sortablePosts = [...filteredPosts];\n    if (sortConfig !== null) {\n      sortablePosts.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortablePosts;\n  }, [filteredPosts, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return {\n    sortedPosts,\n    requestSort,\n    filteredPosts,\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}