{"ast":null,"code":"var _jsxFileName = \"/Users/elvin/Documents/practica/test/src/pages/Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport { toast } from \"react-hot-toast\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\nimport styles from \"./Posts.module.scss\";\nimport MyCard from \"../components/postComponents/MyCard\";\nimport { useFavoritePosts } from \"../utilities/hooks/useFavoritePosts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] = useState(false);\n  const [isVisabilityModalOfDeleteCheckedPosts, setIsVisabilityModalOfDeleteCheckedPosts] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\"\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n  const handleEdit = post => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName\n    });\n  };\n  const handleSave = async () => {\n    try {\n      const response = await axios.put(`https://jsonplaceholder.typicode.com/posts/${editingPost}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map(post => post.id === editingPost ? response.data : post);\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n    setEditingPost(null);\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n\n  // const { favoritePosts, addPostToFavorites, removePostFromFavorites } = useFavoritePosts([]);\n  // const { posts, deletePost } = useDeletePosts([]);\n\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts\n  } = usePagination({\n    users,\n    posts\n  });\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/posts\").then(res => setPosts(res.data));\n  }, []);\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/comments\").then(res => setComments(res.data));\n  }, []);\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => setUsers(res.data));\n  }, []);\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    } else {\n      setFavoritePosts([]);\n    }\n  }, [selectedPosts]);\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`);\n      setPosts(posts.filter(post => post.id !== id));\n      toast.success(\"post deleted\");\n    } catch (error) {\n      toast.error(\"post not deleted\");\n    }\n  };\n  const handleButtonClick = postId => {\n    setSelectedPostId(postId);\n  };\n  const handleComment = postId => {\n    if (selectedPostForComments === postId) {\n      setSelectedPostForComments(null);\n      setSelectedComments([]);\n    } else {\n      const commentsForPost = comments.filter(comment => comment.postId === postId);\n      setSelectedComments(commentsForPost);\n      setSelectedPostForComments(postId);\n    }\n  };\n  const handleAddToFavorities = () => {\n    const currentFavoritePosts = JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [...new Set([...currentFavoritePosts, ...selectedPosts])];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n  const handleFavorite = postId => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter(id => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n  const handleDeleteFromFavorities = async () => {\n    const postsToDelete = [...selectedPosts];\n    const deleteRequests = postsToDelete.map(postId => axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`));\n    try {\n      await Promise.all(deleteRequests);\n      setPosts(posts.filter(post => !postsToDelete.includes(post.id)));\n      setFavoritePosts(favoritePosts.filter(postId => !postsToDelete.includes(postId)));\n      setSelectedPosts(selectedPosts.filter(postId => !postsToDelete.includes(postId)));\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(favoritePosts));\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(ModalForDelete, {\n      id: selectedPostId,\n      isVisabilityModal: isVisabilityModal,\n      handleDelete: handleDelete,\n      setIsVisabilityModal: setIsVisabilityModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowAddToFavorites, {\n      handleAddToFavorities: handleAddToFavorities,\n      isVisabilityModalOfFavorities: isVisabilityModalOfFavorities,\n      setIsVisabilityModalOfFavorities: setIsVisabilityModalOfFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowByDeleteAllCheckedPosts, {\n      setIsVisabilityModalOfDeleteCheckedPosts: setIsVisabilityModalOfDeleteCheckedPosts,\n      isVisabilityModalOfDeleteCheckedPosts: isVisabilityModalOfDeleteCheckedPosts,\n      handleDeleteFromFavorities: handleDeleteFromFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n      postsPerPage: postsPerPage,\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: currentPosts.map(post => {\n        if (editingPost === post.id) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column bg-light p-3 m-1 rounded\",\n            children: /*#__PURE__*/_jsxDEV(FormForUpdatePost, {\n              editedPost: editedPost,\n              setEditedPost: setEditedPost,\n              handleSave: handleSave,\n              handleCancel: handleCancel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(MyCard, {\n          post: post,\n          favoritePosts: favoritePosts,\n          selectedComments: selectedComments,\n          selectedPostForComments: selectedPostForComments,\n          selectedPosts: selectedPosts,\n          handleButtonClick: handleButtonClick,\n          handleEdit: handleEdit,\n          setSelectedPosts: setSelectedPosts,\n          handleFavorite: handleFavorite,\n          handleComment: handleComment,\n          setIsVisabilityModal: setIsVisabilityModal\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), selectedPosts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center gap-5\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfDeleteCheckedPosts(true),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfFavorities(true),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      somethingPerPage: postsPerPage,\n      totalSomething: posts.length,\n      setCurrentPage: setCurrentPage,\n      currentPage: currentPage,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"9NwVIm+a17Urg392MqNx+Ad1s/k=\", false, function () {\n  return [usePagination];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","Layout","axios","Button","Pagination","usePagination","toast","ModalForDelete","FormForUpdatePost","ModalWindowAddToFavorites","ModalWindowByDeleteAllCheckedPosts","CheckBox","styles","MyCard","useFavoritePosts","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","users","setUsers","comments","setComments","isVisabilityModal","setIsVisabilityModal","isVisabilityModalOfFavorities","setIsVisabilityModalOfFavorities","isVisabilityModalOfDeleteCheckedPosts","setIsVisabilityModalOfDeleteCheckedPosts","selectedPostId","setSelectedPostId","selectedComments","setSelectedComments","selectedPostForComments","setSelectedPostForComments","editingPost","setEditingPost","editedPost","setEditedPost","title","body","userName","favoritePosts","setFavoritePosts","selectedPosts","setSelectedPosts","handleEdit","post","id","handleSave","response","put","status","updatedPosts","map","data","success","error","handleCancel","postsPerPage","changePage","setCurrentPage","currentPage","paginate","currentPosts","get","then","res","savedFavorites","localStorage","getItem","JSON","parse","handleDelete","delete","filter","handleButtonClick","postId","handleComment","commentsForPost","comment","handleAddToFavorities","currentFavoritePosts","newFavoritePosts","Set","setItem","stringify","handleFavorite","includes","handleDeleteFromFavorities","postsToDelete","deleteRequests","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","className","container","length","onClick","somethingPerPage","totalSomething","_c","$RefreshReg$"],"sources":["/Users/elvin/Documents/practica/test/src/pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport { toast } from \"react-hot-toast\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\n\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\n\nimport styles from \"./Posts.module.scss\";\nimport MyCard from \"../components/postComponents/MyCard\";\nimport { useFavoritePosts } from \"../utilities/hooks/useFavoritePosts\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] =\n    useState(false);\n  const [\n    isVisabilityModalOfDeleteCheckedPosts,\n    setIsVisabilityModalOfDeleteCheckedPosts,\n  ] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\",\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n\n  const handleEdit = (post) => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName,\n    });\n  };\n\n  const handleSave = async () => {\n    try {\n      const response = await axios.put(\n        `https://jsonplaceholder.typicode.com/posts/${editingPost}`,\n        editedPost\n      );\n\n      if (response.status === 200) {\n        const updatedPosts = posts.map((post) =>\n          post.id === editingPost ? response.data : post\n        );\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n\n    setEditingPost(null);\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  // const { favoritePosts, addPostToFavorites, removePostFromFavorites } = useFavoritePosts([]);\n  // const { posts, deletePost } = useDeletePosts([]);\n\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts,\n  } = usePagination({ users, posts });\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((res) => setPosts(res.data));\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/comments\")\n      .then((res) => setComments(res.data));\n  }, []);\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => setUsers(res.data));\n  }, []);\n\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    } else {\n      setFavoritePosts([]);\n    }\n  }, [selectedPosts]);\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`);\n      setPosts(posts.filter((post) => post.id !== id));\n      toast.success(\"post deleted\");\n    } catch (error) {\n      toast.error(\"post not deleted\");\n    }\n  };\n  const handleButtonClick = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleComment = (postId) => {\n    if (selectedPostForComments === postId) {\n      setSelectedPostForComments(null);\n      setSelectedComments([]);\n    } else {\n      const commentsForPost = comments.filter(\n        (comment) => comment.postId === postId\n      );\n      setSelectedComments(commentsForPost);\n      setSelectedPostForComments(postId);\n    }\n  };\n\n  const handleAddToFavorities = () => {\n    const currentFavoritePosts =\n      JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [\n      ...new Set([...currentFavoritePosts, ...selectedPosts]),\n    ];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n\n  const handleFavorite = (postId) => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter((id) => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n\n  const handleDeleteFromFavorities = async () => {\n    const postsToDelete = [...selectedPosts];\n\n    const deleteRequests = postsToDelete.map((postId) =>\n      axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n    );\n\n    try {\n      await Promise.all(deleteRequests);\n\n      setPosts(posts.filter((post) => !postsToDelete.includes(post.id)));\n\n      setFavoritePosts(\n        favoritePosts.filter((postId) => !postsToDelete.includes(postId))\n      );\n      setSelectedPosts(\n        selectedPosts.filter((postId) => !postsToDelete.includes(postId))\n      );\n\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(favoritePosts));\n\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n\n  return (\n    <Layout>\n      <ModalForDelete\n        id={selectedPostId}\n        isVisabilityModal={isVisabilityModal}\n        handleDelete={handleDelete}\n        setIsVisabilityModal={setIsVisabilityModal}\n      />\n      <ModalWindowAddToFavorites\n        handleAddToFavorities={handleAddToFavorities}\n        isVisabilityModalOfFavorities={isVisabilityModalOfFavorities}\n        setIsVisabilityModalOfFavorities={setIsVisabilityModalOfFavorities}\n      />\n      <ModalWindowByDeleteAllCheckedPosts\n        setIsVisabilityModalOfDeleteCheckedPosts={\n          setIsVisabilityModalOfDeleteCheckedPosts\n        }\n        isVisabilityModalOfDeleteCheckedPosts={\n          isVisabilityModalOfDeleteCheckedPosts\n        }\n        handleDeleteFromFavorities={handleDeleteFromFavorities}\n      />\n      <CheckBox postsPerPage={postsPerPage} changePage={changePage} />\n      <div className={styles.container}>\n        {currentPosts.map((post) => {\n          if (editingPost === post.id) {\n            return (\n              <div\n                key={post.id}\n                className=\"d-flex flex-column bg-light p-3 m-1 rounded\"\n              >\n                <FormForUpdatePost\n                  editedPost={editedPost}\n                  setEditedPost={setEditedPost}\n                  handleSave={handleSave}\n                  handleCancel={handleCancel}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <MyCard\n              key={post.id}\n              post={post}\n              favoritePosts={favoritePosts}\n              selectedComments={selectedComments}\n              selectedPostForComments={selectedPostForComments}\n              selectedPosts={selectedPosts}\n              handleButtonClick={handleButtonClick}\n              handleEdit={handleEdit}\n              setSelectedPosts={setSelectedPosts}\n              handleFavorite={handleFavorite}\n              handleComment={handleComment}\n              setIsVisabilityModal={setIsVisabilityModal}\n            />\n          );\n        })}\n      </div>\n      {selectedPosts.length > 0 && (\n        <div className=\"d-flex justify-content-center gap-5\">\n          <Button\n            onClick={() => setIsVisabilityModalOfDeleteCheckedPosts(true)}\n          >\n            Delete\n          </Button>\n          <Button onClick={() => setIsVisabilityModalOfFavorities(true)}>\n            Add\n          </Button>\n        </div>\n      )}\n\n      <Pagination\n        somethingPerPage={postsPerPage}\n        totalSomething={posts.length}\n        setCurrentPage={setCurrentPage}\n        currentPage={currentPage}\n        paginate={paginate}\n      />\n    </Layout>\n  );\n};\n\nexport default Posts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}