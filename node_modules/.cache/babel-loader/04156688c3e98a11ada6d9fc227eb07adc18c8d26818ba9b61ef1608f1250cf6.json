{"ast":null,"code":"var _s = $RefreshSig$();\nimport { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\nimport useDownloadPosts from \"./useDownloadPosts\";\nexport default function useSaveForm(_ref) {\n  _s();\n  let {\n    setEditedPost,\n    editedPost\n  } = _ref;\n  const {\n    posts,\n    setPosts\n  } = useDownloadPosts();\n  const saveData = async id => {\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map(post => post.id === id ? Object.assign({}, post, response.data) : post);\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n\n        // Обновить данные пользователя\n        const updatedEditedPost = Object.assign({}, editedPost, {\n          userName: response.data.userName\n        });\n        setEditedPost(updatedEditedPost);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  return {\n    saveData\n  };\n}\n_s(useSaveForm, \"9MwaeuC5rZ3zj75IBoihVS+qvy8=\", false, function () {\n  return [useDownloadPosts];\n});","map":{"version":3,"names":["POST_API","toast","axios","useDownloadPosts","useSaveForm","_ref","_s","setEditedPost","editedPost","posts","setPosts","saveData","id","response","put","status","updatedPosts","map","post","Object","assign","data","success","updatedEditedPost","userName","error","title","body"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useSaveForm.js"],"sourcesContent":["import { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\nimport useDownloadPosts from \"./useDownloadPosts\";\n\nexport default function useSaveForm({ setEditedPost, editedPost }) {\n  const { posts, setPosts } = useDownloadPosts();\n\n  const saveData = async (id) => {\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n\n      if (response.status === 200) {\n        const updatedPosts = posts.map((post) =>\n          post.id === id ? Object.assign({}, post, response.data) : post\n        );\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n\n        // Обновить данные пользователя\n        const updatedEditedPost = Object.assign({}, editedPost, {\n          userName: response.data.userName,\n        });\n        setEditedPost(updatedEditedPost);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  return { saveData };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB;AAEjD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAAH,IAAA;EAC/D,MAAM;IAAEI,KAAK;IAAEC;EAAS,CAAC,GAAGP,gBAAgB,CAAC,CAAC;EAE9C,MAAMQ,QAAQ,GAAG,MAAOC,EAAE,IAAK;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAE,GAAEd,QAAS,IAAGY,EAAG,EAAC,EAAEJ,UAAU,CAAC;MAEjE,IAAIK,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,YAAY,GAAGP,KAAK,CAACQ,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACN,EAAE,KAAKA,EAAE,GAAGO,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,IAAI,EAAEL,QAAQ,CAACQ,IAAI,CAAC,GAAGH,IAC5D,CAAC;QACDR,QAAQ,CAACM,YAAY,CAAC;QACtBf,KAAK,CAACqB,OAAO,CAAC,cAAc,CAAC;;QAE7B;QACA,MAAMC,iBAAiB,GAAGJ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEZ,UAAU,EAAE;UACtDgB,QAAQ,EAAEX,QAAQ,CAACQ,IAAI,CAACG;QAC1B,CAAC,CAAC;QACFjB,aAAa,CAACgB,iBAAiB,CAAC;MAClC,CAAC,MAAM;QACLtB,KAAK,CAACwB,KAAK,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdxB,KAAK,CAACwB,KAAK,CAAC,mBAAmB,CAAC;IAClC;IAEAlB,aAAa,CAAC;MAAEmB,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEH,QAAQ,EAAE;IAAG,CAAC,CAAC;EACtD,CAAC;EAED,OAAO;IAAEb;EAAS,CAAC;AACrB;AAACL,EAAA,CA9BuBF,WAAW;EAAA,QACLD,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}