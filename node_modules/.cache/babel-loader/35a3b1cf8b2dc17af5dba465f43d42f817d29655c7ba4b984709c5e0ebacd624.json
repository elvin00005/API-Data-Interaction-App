{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function usePagination(_ref) {\n  _s();\n  let {\n    posts,\n    users\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(localStorage.getItem(\"quantityPosts\"));\n  const [currentPosts, setCurrentPosts] = useState([]);\n  useEffect(() => {\n    const lastIndexPost = currentPage * postsPerPage;\n    const firstIndexPost = lastIndexPost - postsPerPage;\n    const processedList = posts.map(post => {\n      const user = users.find(user => user.id === post.userId);\n      if (user) {\n        return {\n          ...post,\n          userName: user.name\n        };\n      }\n      return post;\n    });\n    setCurrentPosts(processedList.slice(firstIndexPost, lastIndexPost));\n  }, [posts, users, currentPage, postsPerPage]);\n  const paginate = number => setCurrentPage(number);\n  const changePage = value => {\n    setPostsPerPage(value);\n    localStorage.setItem(\"quantityPosts\", value);\n  };\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    currentPosts\n  };\n}\n_s(usePagination, \"rwNnCiOlHkJnGbmQxQlo0mJ8Ieg=\");","map":{"version":3,"names":["useEffect","useState","usePagination","_ref","_s","posts","users","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","localStorage","getItem","currentPosts","setCurrentPosts","lastIndexPost","firstIndexPost","processedList","map","post","user","find","id","userId","userName","name","slice","paginate","number","changePage","value","setItem"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/usePagination.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function usePagination({ posts, users }) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(\n    localStorage.getItem(\"quantityPosts\")\n  );\n  const [currentPosts, setCurrentPosts] = useState([]);\n\n  useEffect(() => {\n    const lastIndexPost = currentPage * postsPerPage;\n    const firstIndexPost = lastIndexPost - postsPerPage;\n    const processedList = posts.map((post) => {\n      const user = users.find((user) => user.id === post.userId);\n      if (user) {\n        return { ...post, userName: user.name };\n      }\n      return post;\n    });\n    setCurrentPosts(processedList.slice(firstIndexPost, lastIndexPost));\n  }, [posts, users, currentPage, postsPerPage]);\n\n  const paginate = (number) => setCurrentPage(number);\n  const changePage = (value) => {\n    setPostsPerPage(value);\n    localStorage.setItem(\"quantityPosts\", value);\n  };\n\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    currentPosts,\n  };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAH,IAAA;EACpD,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAC9CU,YAAY,CAACC,OAAO,CAAC,eAAe,CACtC,CAAC;EACD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAGR,WAAW,GAAGE,YAAY;IAChD,MAAMO,cAAc,GAAGD,aAAa,GAAGN,YAAY;IACnD,MAAMQ,aAAa,GAAGZ,KAAK,CAACa,GAAG,CAAEC,IAAI,IAAK;MACxC,MAAMC,IAAI,GAAGd,KAAK,CAACe,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,IAAI,CAACI,MAAM,CAAC;MAC1D,IAAIH,IAAI,EAAE;QACR,OAAO;UAAE,GAAGD,IAAI;UAAEK,QAAQ,EAAEJ,IAAI,CAACK;QAAK,CAAC;MACzC;MACA,OAAON,IAAI;IACb,CAAC,CAAC;IACFL,eAAe,CAACG,aAAa,CAACS,KAAK,CAACV,cAAc,EAAED,aAAa,CAAC,CAAC;EACrE,CAAC,EAAE,CAACV,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEE,YAAY,CAAC,CAAC;EAE7C,MAAMkB,QAAQ,GAAIC,MAAM,IAAKpB,cAAc,CAACoB,MAAM,CAAC;EACnD,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5BpB,eAAe,CAACoB,KAAK,CAAC;IACtBnB,YAAY,CAACoB,OAAO,CAAC,eAAe,EAAED,KAAK,CAAC;EAC9C,CAAC;EAED,OAAO;IACLrB,YAAY;IACZD,cAAc;IACdD,WAAW;IACXoB,QAAQ;IACRE,UAAU;IACVhB;EACF,CAAC;AACH;AAACT,EAAA,CAlCuBF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}