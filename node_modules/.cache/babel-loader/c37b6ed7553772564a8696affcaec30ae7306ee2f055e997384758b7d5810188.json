{"ast":null,"code":"var _s = $RefreshSig$();\nexport const useDeletePostsFromFavorities = () => {\n  _s();\n  const {\n    posts,\n    setPosts\n  } = useDownloadPosts();\n  const {\n    favoritePosts,\n    setFavoritePosts\n  } = useFavorite();\n  const deletePost = async selectedPosts => {\n    const postsToDelete = [...selectedPosts];\n    try {\n      const deleteRequests = postsToDelete.map(postId => axios.delete(`${POST_API}/${postId}`));\n      await Promise.all(deleteRequests);\n\n      // Удаление постов из состояния posts\n      setPosts(prevPosts => prevPosts.filter(post => !postsToDelete.includes(post.id)));\n\n      // Удаление постов из состояния favoritePosts\n      setFavoritePosts(prevFavoritePosts => prevFavoritePosts.filter(postId => !postsToDelete.includes(postId)));\n\n      // Обновление локального хранилища\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(favoritePosts.filter(postId => !postsToDelete.includes(postId))));\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n  return {\n    deletePost\n  };\n};\n_s(useDeletePostsFromFavorities, \"8RwNFnQXoGUPT1QRqRvC1Ni5DAQ=\", true);","map":{"version":3,"names":["useDeletePostsFromFavorities","_s","posts","setPosts","useDownloadPosts","favoritePosts","setFavoritePosts","useFavorite","deletePost","selectedPosts","postsToDelete","deleteRequests","map","postId","axios","delete","POST_API","Promise","all","prevPosts","filter","post","includes","id","prevFavoritePosts","localStorage","setItem","JSON","stringify","toast","success","error"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useDeletePostsFromFavorites.js"],"sourcesContent":["export const useDeletePostsFromFavorities = () => {\n  const { posts, setPosts } = useDownloadPosts();\n  const { favoritePosts, setFavoritePosts } = useFavorite();\n\n  const deletePost = async (selectedPosts) => {\n    const postsToDelete = [...selectedPosts];\n\n    try {\n      const deleteRequests = postsToDelete.map((postId) =>\n        axios.delete(`${POST_API}/${postId}`)\n      );\n\n      await Promise.all(deleteRequests);\n\n      // Удаление постов из состояния posts\n      setPosts((prevPosts) =>\n        prevPosts.filter((post) => !postsToDelete.includes(post.id))\n      );\n\n      // Удаление постов из состояния favoritePosts\n      setFavoritePosts((prevFavoritePosts) =>\n        prevFavoritePosts.filter((postId) => !postsToDelete.includes(postId))\n      );\n\n      // Обновление локального хранилища\n      localStorage.setItem(\n        \"favoritePosts\",\n        JSON.stringify(\n          favoritePosts.filter((postId) => !postsToDelete.includes(postId))\n        )\n      );\n\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n\n  return { deletePost };\n};\n"],"mappings":";AAAA,OAAO,MAAMA,4BAA4B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChD,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGC,gBAAgB,CAAC,CAAC;EAC9C,MAAM;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGC,WAAW,CAAC,CAAC;EAEzD,MAAMC,UAAU,GAAG,MAAOC,aAAa,IAAK;IAC1C,MAAMC,aAAa,GAAG,CAAC,GAAGD,aAAa,CAAC;IAExC,IAAI;MACF,MAAME,cAAc,GAAGD,aAAa,CAACE,GAAG,CAAEC,MAAM,IAC9CC,KAAK,CAACC,MAAM,CAAE,GAAEC,QAAS,IAAGH,MAAO,EAAC,CACtC,CAAC;MAED,MAAMI,OAAO,CAACC,GAAG,CAACP,cAAc,CAAC;;MAEjC;MACAR,QAAQ,CAAEgB,SAAS,IACjBA,SAAS,CAACC,MAAM,CAAEC,IAAI,IAAK,CAACX,aAAa,CAACY,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC,CAC7D,CAAC;;MAED;MACAjB,gBAAgB,CAAEkB,iBAAiB,IACjCA,iBAAiB,CAACJ,MAAM,CAAEP,MAAM,IAAK,CAACH,aAAa,CAACY,QAAQ,CAACT,MAAM,CAAC,CACtE,CAAC;;MAED;MACAY,YAAY,CAACC,OAAO,CAClB,eAAe,EACfC,IAAI,CAACC,SAAS,CACZvB,aAAa,CAACe,MAAM,CAAEP,MAAM,IAAK,CAACH,aAAa,CAACY,QAAQ,CAACT,MAAM,CAAC,CAClE,CACF,CAAC;MAEDgB,KAAK,CAACC,OAAO,CAAC,wBAAwB,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,KAAK,CAACE,KAAK,CAAC,6BAA6B,CAAC;IAC5C;EACF,CAAC;EAED,OAAO;IAAEvB;EAAW,CAAC;AACvB,CAAC;AAACP,EAAA,CAvCWD,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}