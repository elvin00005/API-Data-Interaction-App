{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API, USER_API } from \"../const/const\";\nimport _ from \"lodash\";\nimport { useDeleteAlbum } from \"./useDeleteAlbum\";\nexport function useGetsPhoto() {\n  _s();\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const {\n    deleteAlbum\n  } = useDeleteAlbum(setAlbums);\n  console.log(albums);\n  const editUser = (id, data) => {\n    setAlbums(prev => {\n      return prev.map(post => {\n        const {\n          userName,\n          ...rest\n        } = data;\n        if (post.id === id) {\n          return {\n            ...post,\n            ...rest,\n            user: {\n              ...post.user,\n              name: userName\n            }\n          };\n        }\n        return post;\n      });\n    });\n  };\n  const getAlbumsLists = async () => {\n    return await Promise.all([axios.get(ALBUMS_API), axios.get(USER_API), axios.get(PHOTOS_API)]);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getAlbumsLists().then(_ref => {\n      let [albums, users, photos] = _ref;\n      const userMap = _.keyBy(users.data, \"id\");\n      const photosMap = _.groupBy(photos.data, \"albumId\");\n      const albumsWithPhotos = albums.data.map(album => {\n        return {\n          ...album,\n          user: userMap[album.userId],\n          photos: photosMap[album.id]\n        };\n      });\n      setAlbums(albumsWithPhotos);\n    }).catch(err => setError(true)).finally(() => setLoading(false));\n  }, []);\n  return {\n    albums,\n    deleteAlbum,\n    setAlbums,\n    editUser\n  };\n}\n_s(useGetsPhoto, \"qiPfzjkRwqsEIuI6qjkRotL9C2k=\", false, function () {\n  return [useDeleteAlbum];\n});","map":{"version":3,"names":["axios","useEffect","useState","ALBUMS_API","PHOTOS_API","USER_API","_","useDeleteAlbum","useGetsPhoto","_s","albums","setAlbums","loading","setLoading","error","setError","deleteAlbum","console","log","editUser","id","data","prev","map","post","userName","rest","user","name","getAlbumsLists","Promise","all","get","then","_ref","users","photos","userMap","keyBy","photosMap","groupBy","albumsWithPhotos","album","userId","catch","err","finally"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useGetsPhoto.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API, USER_API } from \"../const/const\";\nimport _ from \"lodash\";\nimport { useDeleteAlbum } from \"./useDeleteAlbum\";\n\nexport function useGetsPhoto() {\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { deleteAlbum } = useDeleteAlbum(setAlbums);\n  console.log(albums);\n  const editUser = (id, data) => {\n    setAlbums((prev) => {\n      return prev.map((post) => {\n        const { userName, ...rest } = data;\n        if (post.id === id) {\n          return { ...post, ...rest, user: { ...post.user, name: userName } };\n        }\n        return post;\n      });\n    });\n  };\n  const getAlbumsLists = async () => {\n    return await Promise.all([\n      axios.get(ALBUMS_API),\n      axios.get(USER_API),\n      axios.get(PHOTOS_API),\n    ]);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getAlbumsLists()\n      .then(([albums, users, photos]) => {\n        const userMap = _.keyBy(users.data, \"id\");\n        const photosMap = _.groupBy(photos.data, \"albumId\");\n        const albumsWithPhotos = albums.data.map((album) => {\n          return {\n            ...album,\n            user: userMap[album.userId],\n            photos: photosMap[album.id],\n          };\n        });\n        setAlbums(albumsWithPhotos);\n      })\n      .catch((err) => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return { albums, deleteAlbum, setAlbums, editUser };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,gBAAgB;AACjE,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM;IAAEc;EAAY,CAAC,GAAGT,cAAc,CAACI,SAAS,CAAC;EACjDM,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;EACnB,MAAMS,QAAQ,GAAGA,CAACC,EAAE,EAAEC,IAAI,KAAK;IAC7BV,SAAS,CAAEW,IAAI,IAAK;MAClB,OAAOA,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;QACxB,MAAM;UAAEC,QAAQ;UAAE,GAAGC;QAAK,CAAC,GAAGL,IAAI;QAClC,IAAIG,IAAI,CAACJ,EAAE,KAAKA,EAAE,EAAE;UAClB,OAAO;YAAE,GAAGI,IAAI;YAAE,GAAGE,IAAI;YAAEC,IAAI,EAAE;cAAE,GAAGH,IAAI,CAACG,IAAI;cAAEC,IAAI,EAAEH;YAAS;UAAE,CAAC;QACrE;QACA,OAAOD,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACD,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,OAAO,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvB/B,KAAK,CAACgC,GAAG,CAAC7B,UAAU,CAAC,EACrBH,KAAK,CAACgC,GAAG,CAAC3B,QAAQ,CAAC,EACnBL,KAAK,CAACgC,GAAG,CAAC5B,UAAU,CAAC,CACtB,CAAC;EACJ,CAAC;EAEDH,SAAS,CAAC,MAAM;IACdY,UAAU,CAAC,IAAI,CAAC;IAChBgB,cAAc,CAAC,CAAC,CACbI,IAAI,CAACC,IAAA,IAA6B;MAAA,IAA5B,CAACxB,MAAM,EAAEyB,KAAK,EAAEC,MAAM,CAAC,GAAAF,IAAA;MAC5B,MAAMG,OAAO,GAAG/B,CAAC,CAACgC,KAAK,CAACH,KAAK,CAACd,IAAI,EAAE,IAAI,CAAC;MACzC,MAAMkB,SAAS,GAAGjC,CAAC,CAACkC,OAAO,CAACJ,MAAM,CAACf,IAAI,EAAE,SAAS,CAAC;MACnD,MAAMoB,gBAAgB,GAAG/B,MAAM,CAACW,IAAI,CAACE,GAAG,CAAEmB,KAAK,IAAK;QAClD,OAAO;UACL,GAAGA,KAAK;UACRf,IAAI,EAAEU,OAAO,CAACK,KAAK,CAACC,MAAM,CAAC;UAC3BP,MAAM,EAAEG,SAAS,CAACG,KAAK,CAACtB,EAAE;QAC5B,CAAC;MACH,CAAC,CAAC;MACFT,SAAS,CAAC8B,gBAAgB,CAAC;IAC7B,CAAC,CAAC,CACDG,KAAK,CAAEC,GAAG,IAAK9B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC9B+B,OAAO,CAAC,MAAMjC,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEH,MAAM;IAAEM,WAAW;IAAEL,SAAS;IAAEQ;EAAS,CAAC;AACrD;AAACV,EAAA,CA7CeD,YAAY;EAAA,QAIFD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}