{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { COMMENT_API, POST_API, USER_API } from \"../const/const\";\nimport _ from \"lodash\";\nimport { useDeletePost } from \"./useDeletePost\";\nexport default function useDownloadPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const {\n    deletePost\n  } = useDeletePost(setPosts);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const editUser = (id, data) => {\n    console.log(\"\");\n    setPosts(prev => {\n      return prev.map(post => {\n        const {\n          userName,\n          ...rest\n        } = data;\n        if (post.id === id) {\n          return {\n            ...post,\n            ...rest,\n            user: {\n              ...post.user,\n              name: userName\n            }\n          };\n        }\n        return post;\n      });\n    });\n  };\n  const getPostList = async () => {\n    return await Promise.all([axios.get(POST_API), axios.get(USER_API), axios.get(COMMENT_API)]);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getPostList().then(_ref => {\n      let [posts, users, comments] = _ref;\n      const usersMap = _.keyBy(users.data, \"id\");\n      const commentsMap = _.groupBy(comments.data, \"postId\");\n      const postsWithCommentsAndUsers = posts.data.map(post => {\n        return {\n          ...post,\n          user: usersMap[post.userId],\n          comments: commentsMap[post.id]\n        };\n      });\n      setPosts(postsWithCommentsAndUsers);\n    }).catch(err => setError(true)).finally(() => setLoading(false));\n  }, []);\n  return {\n    posts,\n    setLoading,\n    error,\n    deletePost,\n    setPosts,\n    editUser\n  };\n}\n_s(useDownloadPosts, \"34SZ7NOrU2vjv0aalj+jBYvVImk=\", false, function () {\n  return [useDeletePost];\n});","map":{"version":3,"names":["axios","useEffect","useState","COMMENT_API","POST_API","USER_API","_","useDeletePost","useDownloadPosts","_s","posts","setPosts","deletePost","loading","setLoading","error","setError","editUser","id","data","console","log","prev","map","post","userName","rest","user","name","getPostList","Promise","all","get","then","_ref","users","comments","usersMap","keyBy","commentsMap","groupBy","postsWithCommentsAndUsers","userId","catch","err","finally"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useDownloadPosts.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { COMMENT_API, POST_API, USER_API } from \"../const/const\";\nimport _ from \"lodash\";\nimport { useDeletePost } from \"./useDeletePost\";\n\nexport default function useDownloadPosts() {\n  const [posts, setPosts] = useState([]);\n  const { deletePost } = useDeletePost(setPosts);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const editUser = (id, data) => {\n    console.log(\"\");\n    setPosts((prev) => {\n      return prev.map((post) => {\n        const { userName, ...rest } = data;\n        if (post.id === id) {\n          return { ...post, ...rest, user: { ...post.user, name: userName } };\n        }\n        return post;\n      });\n    });\n  };\n  const getPostList = async () => {\n    return await Promise.all([\n      axios.get(POST_API),\n      axios.get(USER_API),\n      axios.get(COMMENT_API),\n    ]);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getPostList()\n      .then(([posts, users, comments]) => {\n        const usersMap = _.keyBy(users.data, \"id\");\n        const commentsMap = _.groupBy(comments.data, \"postId\");\n        const postsWithCommentsAndUsers = posts.data.map((post) => {\n          return {\n            ...post,\n            user: usersMap[post.userId],\n            comments: commentsMap[post.id],\n          };\n        });\n\n        setPosts(postsWithCommentsAndUsers);\n      })\n      .catch((err) => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return { posts, setLoading, error, deletePost, setPosts, editUser };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,gBAAgB;AAChE,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEU;EAAW,CAAC,GAAGL,aAAa,CAACI,QAAQ,CAAC;EAC9C,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAMe,QAAQ,GAAGA,CAACC,EAAE,EAAEC,IAAI,KAAK;IAC7BC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;IACfV,QAAQ,CAAEW,IAAI,IAAK;MACjB,OAAOA,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;QACxB,MAAM;UAAEC,QAAQ;UAAE,GAAGC;QAAK,CAAC,GAAGP,IAAI;QAClC,IAAIK,IAAI,CAACN,EAAE,KAAKA,EAAE,EAAE;UAClB,OAAO;YAAE,GAAGM,IAAI;YAAE,GAAGE,IAAI;YAAEC,IAAI,EAAE;cAAE,GAAGH,IAAI,CAACG,IAAI;cAAEC,IAAI,EAAEH;YAAS;UAAE,CAAC;QACrE;QACA,OAAOD,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACD,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,OAAO,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvB/B,KAAK,CAACgC,GAAG,CAAC5B,QAAQ,CAAC,EACnBJ,KAAK,CAACgC,GAAG,CAAC3B,QAAQ,CAAC,EACnBL,KAAK,CAACgC,GAAG,CAAC7B,WAAW,CAAC,CACvB,CAAC;EACJ,CAAC;EAEDF,SAAS,CAAC,MAAM;IACda,UAAU,CAAC,IAAI,CAAC;IAChBe,WAAW,CAAC,CAAC,CACVI,IAAI,CAACC,IAAA,IAA8B;MAAA,IAA7B,CAACxB,KAAK,EAAEyB,KAAK,EAAEC,QAAQ,CAAC,GAAAF,IAAA;MAC7B,MAAMG,QAAQ,GAAG/B,CAAC,CAACgC,KAAK,CAACH,KAAK,CAAChB,IAAI,EAAE,IAAI,CAAC;MAC1C,MAAMoB,WAAW,GAAGjC,CAAC,CAACkC,OAAO,CAACJ,QAAQ,CAACjB,IAAI,EAAE,QAAQ,CAAC;MACtD,MAAMsB,yBAAyB,GAAG/B,KAAK,CAACS,IAAI,CAACI,GAAG,CAAEC,IAAI,IAAK;QACzD,OAAO;UACL,GAAGA,IAAI;UACPG,IAAI,EAAEU,QAAQ,CAACb,IAAI,CAACkB,MAAM,CAAC;UAC3BN,QAAQ,EAAEG,WAAW,CAACf,IAAI,CAACN,EAAE;QAC/B,CAAC;MACH,CAAC,CAAC;MAEFP,QAAQ,CAAC8B,yBAAyB,CAAC;IACrC,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK5B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC9B6B,OAAO,CAAC,MAAM/B,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,KAAK;IAAEI,UAAU;IAAEC,KAAK;IAAEH,UAAU;IAAED,QAAQ;IAAEM;EAAS,CAAC;AACrE;AAACR,EAAA,CA9CuBD,gBAAgB;EAAA,QAEfD,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}