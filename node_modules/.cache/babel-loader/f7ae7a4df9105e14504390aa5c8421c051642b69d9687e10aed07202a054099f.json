{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nexport const useFavoritePosts = selectedPosts => {\n  _s();\n  const [favoritePosts, setFavoritePosts] = useState(selectedPosts || []);\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    }\n  }, [selectedPosts]);\n  const removePostFromFavorites = postId => {\n    const newFavoritePosts = favoritePosts.filter(id => id !== postId);\n    setFavoritePosts(newFavoritePosts);\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n  };\n  const addToFavorities = () => {\n    const currentFavoritePosts = JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [...new Set([...currentFavoritePosts, ...selectedPosts])];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n  const addFavorite = postId => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter(id => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n  return {\n    favoritePosts,\n    removePostFromFavorites,\n    addToFavorities,\n    addFavorite\n  };\n};\n_s(useFavoritePosts, \"2l3Hw9apHhIR/PYR0gKbf8Hl54Y=\");","map":{"version":3,"names":["useEffect","useState","toast","useFavoritePosts","selectedPosts","_s","favoritePosts","setFavoritePosts","savedFavorites","localStorage","getItem","JSON","parse","removePostFromFavorites","postId","newFavoritePosts","filter","id","setItem","stringify","addToFavorities","currentFavoritePosts","Set","success","addFavorite","includes","error"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useFavoritePosts.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\n\nexport const useFavoritePosts = (selectedPosts) => {\n  const [favoritePosts, setFavoritePosts] = useState(selectedPosts || []);\n\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    }\n  }, [selectedPosts]);\n\n  const removePostFromFavorites = (postId) => {\n    const newFavoritePosts = favoritePosts.filter((id) => id !== postId);\n    setFavoritePosts(newFavoritePosts);\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n  };\n  const addToFavorities = () => {\n    const currentFavoritePosts =\n      JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [\n      ...new Set([...currentFavoritePosts, ...selectedPosts]),\n    ];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n  const addFavorite = (postId) => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter((id) => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n\n  return {\n    favoritePosts,\n\n    removePostFromFavorites,\n    addToFavorities,\n    addFavorite,\n  };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,OAAO,MAAMC,gBAAgB,GAAIC,aAAa,IAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAACG,aAAa,IAAI,EAAE,CAAC;EAEvEJ,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC5D,IAAIF,cAAc,EAAE;MAClBD,gBAAgB,CAACI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,CAACJ,aAAa,CAAC,CAAC;EAEnB,MAAMS,uBAAuB,GAAIC,MAAM,IAAK;IAC1C,MAAMC,gBAAgB,GAAGT,aAAa,CAACU,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKH,MAAM,CAAC;IACpEP,gBAAgB,CAACQ,gBAAgB,CAAC;IAClCN,YAAY,CAACS,OAAO,CAAC,eAAe,EAAEP,IAAI,CAACQ,SAAS,CAACJ,gBAAgB,CAAC,CAAC;EACzE,CAAC;EACD,MAAMK,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,oBAAoB,GACxBV,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE;IACzD,MAAMK,gBAAgB,GAAG,CACvB,GAAG,IAAIO,GAAG,CAAC,CAAC,GAAGD,oBAAoB,EAAE,GAAGjB,aAAa,CAAC,CAAC,CACxD;IACDK,YAAY,CAACS,OAAO,CAAC,eAAe,EAAEP,IAAI,CAACQ,SAAS,CAACJ,gBAAgB,CAAC,CAAC;IACvER,gBAAgB,CAACQ,gBAAgB,CAAC;IAClCb,KAAK,CAACqB,OAAO,CAAC,2BAA2B,CAAC;EAC5C,CAAC;EACD,MAAMC,WAAW,GAAIV,MAAM,IAAK;IAC9B,IAAIR,aAAa,CAACmB,QAAQ,CAACX,MAAM,CAAC,EAAE;MAClC,MAAMC,gBAAgB,GAAGT,aAAa,CAACU,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKH,MAAM,CAAC;MACpEP,gBAAgB,CAACQ,gBAAgB,CAAC;MAClCN,YAAY,CAACS,OAAO,CAAC,eAAe,EAAEP,IAAI,CAACQ,SAAS,CAACJ,gBAAgB,CAAC,CAAC;MACvEb,KAAK,CAACwB,KAAK,CAAC,6BAA6B,CAAC;IAC5C,CAAC,MAAM;MACL,MAAMX,gBAAgB,GAAG,CAAC,GAAGT,aAAa,EAAEQ,MAAM,CAAC;MACnDP,gBAAgB,CAACQ,gBAAgB,CAAC;MAClCN,YAAY,CAACS,OAAO,CAAC,eAAe,EAAEP,IAAI,CAACQ,SAAS,CAACJ,gBAAgB,CAAC,CAAC;MACvEb,KAAK,CAACqB,OAAO,CAAC,0BAA0B,CAAC;IAC3C;EACF,CAAC;EAED,OAAO;IACLjB,aAAa;IAEbO,uBAAuB;IACvBO,eAAe;IACfI;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CA9CWF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}