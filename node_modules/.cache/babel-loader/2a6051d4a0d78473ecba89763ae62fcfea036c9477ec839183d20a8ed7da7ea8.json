{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFavoritePosts } from \"../context/favoritiesPostsContext\";\nimport { useMemo, useState } from \"react\";\nexport function useFilterPosts(_ref) {\n  _s();\n  let {\n    posts\n  } = _ref;\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const {\n    favoritePosts,\n    showFavorites,\n    setShowFavorites\n  } = useFavoritePosts();\n  const uniqueUsers = Array.from(new Set(posts.map(post => post.user ? post.user.id : \"Anonymous\"))).map(id => {\n    const post = posts.find(post => post.user && post.user.id === id);\n    return post ? post.user : {\n      name: \"Anonymous\",\n      id: \"Anonymous\"\n    };\n  });\n  const userOptions = uniqueUsers.map(user => ({\n    label: user.name,\n    value: user.id\n  }));\n  const filteredPosts = useMemo(() => posts.filter(post => {\n    const titleMatch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const userMatch = selectedUsers.length === 0 || selectedUsers.find(user => user.value === post.userId);\n    const favoriteMatch = showFavorites ? favoritePosts.includes(post.id) : true;\n    return titleMatch && userMatch && favoriteMatch;\n  }), [posts, searchTerm, selectedUsers, favoritePosts, showFavorites]);\n  return {\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites,\n    filteredPosts\n  };\n}\n_s(useFilterPosts, \"vTYYmApJbyNxRHfJmo4C9z9FWFE=\", false, function () {\n  return [useFavoritePosts];\n});","map":{"version":3,"names":["useFavoritePosts","useMemo","useState","useFilterPosts","_ref","_s","posts","searchTerm","setSearchTerm","selectedUsers","setSelectedUsers","favoritePosts","showFavorites","setShowFavorites","uniqueUsers","Array","from","Set","map","post","user","id","find","name","userOptions","label","value","filteredPosts","filter","titleMatch","title","toLowerCase","includes","userMatch","length","userId","favoriteMatch"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useFilterPosts.js"],"sourcesContent":["import { useFavoritePosts } from \"../context/favoritiesPostsContext\";\nimport { useMemo, useState } from \"react\";\n\nexport function useFilterPosts({ posts }) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { favoritePosts, showFavorites, setShowFavorites } = useFavoritePosts();\n\n  const uniqueUsers = Array.from(\n    new Set(posts.map((post) => (post.user ? post.user.id : \"Anonymous\")))\n  ).map((id) => {\n    const post = posts.find((post) => post.user && post.user.id === id);\n    return post ? post.user : { name: \"Anonymous\", id: \"Anonymous\" };\n  });\n\n  const userOptions = uniqueUsers.map((user) => ({\n    label: user.name,\n    value: user.id,\n  }));\n\n  const filteredPosts = useMemo(\n    () =>\n      posts.filter((post) => {\n        const titleMatch = post.title\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n        const userMatch =\n          selectedUsers.length === 0 ||\n          selectedUsers.find((user) => user.value === post.userId);\n        const favoriteMatch = showFavorites\n          ? favoritePosts.includes(post.id)\n          : true;\n        return titleMatch && userMatch && favoriteMatch;\n      }),\n    [posts, searchTerm, selectedUsers, favoritePosts, showFavorites]\n  );\n\n  return {\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites,\n    filteredPosts,\n  };\n}\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAEzC,OAAO,SAASC,cAAcA,CAAAC,IAAA,EAAY;EAAAC,EAAA;EAAA,IAAX;IAAEC;EAAM,CAAC,GAAAF,IAAA;EACtC,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAES,aAAa;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGb,gBAAgB,CAAC,CAAC;EAE7E,MAAMc,WAAW,GAAGC,KAAK,CAACC,IAAI,CAC5B,IAAIC,GAAG,CAACX,KAAK,CAACY,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACC,EAAE,GAAG,WAAY,CAAC,CACvE,CAAC,CAACH,GAAG,CAAEG,EAAE,IAAK;IACZ,MAAMF,IAAI,GAAGb,KAAK,CAACgB,IAAI,CAAEH,IAAI,IAAKA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;IACnE,OAAOF,IAAI,GAAGA,IAAI,CAACC,IAAI,GAAG;MAAEG,IAAI,EAAE,WAAW;MAAEF,EAAE,EAAE;IAAY,CAAC;EAClE,CAAC,CAAC;EAEF,MAAMG,WAAW,GAAGV,WAAW,CAACI,GAAG,CAAEE,IAAI,KAAM;IAC7CK,KAAK,EAAEL,IAAI,CAACG,IAAI;IAChBG,KAAK,EAAEN,IAAI,CAACC;EACd,CAAC,CAAC,CAAC;EAEH,MAAMM,aAAa,GAAG1B,OAAO,CAC3B,MACEK,KAAK,CAACsB,MAAM,CAAET,IAAI,IAAK;IACrB,MAAMU,UAAU,GAAGV,IAAI,CAACW,KAAK,CAC1BC,WAAW,CAAC,CAAC,CACbC,QAAQ,CAACzB,UAAU,CAACwB,WAAW,CAAC,CAAC,CAAC;IACrC,MAAME,SAAS,GACbxB,aAAa,CAACyB,MAAM,KAAK,CAAC,IAC1BzB,aAAa,CAACa,IAAI,CAAEF,IAAI,IAAKA,IAAI,CAACM,KAAK,KAAKP,IAAI,CAACgB,MAAM,CAAC;IAC1D,MAAMC,aAAa,GAAGxB,aAAa,GAC/BD,aAAa,CAACqB,QAAQ,CAACb,IAAI,CAACE,EAAE,CAAC,GAC/B,IAAI;IACR,OAAOQ,UAAU,IAAII,SAAS,IAAIG,aAAa;EACjD,CAAC,CAAC,EACJ,CAAC9B,KAAK,EAAEC,UAAU,EAAEE,aAAa,EAAEE,aAAa,EAAEC,aAAa,CACjE,CAAC;EAED,OAAO;IACLY,WAAW;IACXjB,UAAU;IACVE,aAAa;IACbD,aAAa;IACbE,gBAAgB;IAChBG,gBAAgB;IAChBc;EACF,CAAC;AACH;AAACtB,EAAA,CA3CeF,cAAc;EAAA,QAG+BH,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}