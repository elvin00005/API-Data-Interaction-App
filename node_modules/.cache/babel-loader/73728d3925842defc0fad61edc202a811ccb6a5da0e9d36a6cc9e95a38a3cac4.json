{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo, useState } from \"react\";\nimport { useFavoriteAlbums } from \"../context/favoritiesAlbumsContext\";\nimport { useAlbums } from \"../context/albumsContext\";\nexport function useFilterAlbums() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const {\n    favoriteAlbums,\n    showFavorites,\n    setShowFavorites\n  } = useFavoriteAlbums();\n  const {\n    albums\n  } = useAlbums();\n  const uniqueUsers = Array.from(new Set(albums.map(album => album.user ? album.user.id : \"Anonymous\"))).map(id => {\n    const album = albums.find(album => album.user && album.user.id === id);\n    return album ? album.user : {\n      name: \"Anonymous\",\n      id: \"Anonymous\"\n    };\n  });\n  const userOptions = uniqueUsers.map(user => ({\n    label: user.name,\n    value: user.id\n  }));\n  const filteredAlbums = useMemo(() => albums.filter(album => {\n    const titleMatch = album.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const userMatch = selectedUsers.length === 0 || selectedUsers.find(user => user.value === album.userId);\n    const favoriteMatch = showFavorites ? favoriteAlbums.includes(album.id) : true;\n    return titleMatch && userMatch && favoriteMatch;\n  }), [albums, searchTerm, selectedUsers, favoriteAlbums, showFavorites]);\n  return {\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites,\n    filteredAlbums\n  };\n}\n_s(useFilterAlbums, \"zxu5B/ynVFChv66NYsKXgswIqG4=\", false, function () {\n  return [useFavoriteAlbums, useAlbums];\n});","map":{"version":3,"names":["useMemo","useState","useFavoriteAlbums","useAlbums","useFilterAlbums","_s","searchTerm","setSearchTerm","selectedUsers","setSelectedUsers","favoriteAlbums","showFavorites","setShowFavorites","albums","uniqueUsers","Array","from","Set","map","album","user","id","find","name","userOptions","label","value","filteredAlbums","filter","titleMatch","title","toLowerCase","includes","userMatch","length","userId","favoriteMatch"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useFilterAlbums.js"],"sourcesContent":["import { useMemo, useState } from \"react\";\nimport { useFavoriteAlbums } from \"../context/favoritiesAlbumsContext\";\nimport { useAlbums } from \"../context/albumsContext\";\n\nexport function useFilterAlbums() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { favoriteAlbums, showFavorites, setShowFavorites } =\n    useFavoriteAlbums();\n  const { albums } = useAlbums();\n\n  const uniqueUsers = Array.from(\n    new Set(albums.map((album) => (album.user ? album.user.id : \"Anonymous\")))\n  ).map((id) => {\n    const album = albums.find((album) => album.user && album.user.id === id);\n    return album ? album.user : { name: \"Anonymous\", id: \"Anonymous\" };\n  });\n\n  const userOptions = uniqueUsers.map((user) => ({\n    label: user.name,\n    value: user.id,\n  }));\n\n  const filteredAlbums = useMemo(\n    () =>\n      albums.filter((album) => {\n        const titleMatch = album.title\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n        const userMatch =\n          selectedUsers.length === 0 ||\n          selectedUsers.find((user) => user.value === album.userId);\n        const favoriteMatch = showFavorites\n          ? favoriteAlbums.includes(album.id)\n          : true;\n        return titleMatch && userMatch && favoriteMatch;\n      }),\n    [albums, searchTerm, selectedUsers, favoriteAlbums, showFavorites]\n  );\n\n  return {\n    userOptions,\n    searchTerm,\n    selectedUsers,\n    setSearchTerm,\n    setSelectedUsers,\n    setShowFavorites,\n    filteredAlbums,\n  };\n}\n"],"mappings":";AAAA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACzC,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,OAAO,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAES,cAAc;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GACvDV,iBAAiB,CAAC,CAAC;EACrB,MAAM;IAAEW;EAAO,CAAC,GAAGV,SAAS,CAAC,CAAC;EAE9B,MAAMW,WAAW,GAAGC,KAAK,CAACC,IAAI,CAC5B,IAAIC,GAAG,CAACJ,MAAM,CAACK,GAAG,CAAEC,KAAK,IAAMA,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACC,IAAI,CAACC,EAAE,GAAG,WAAY,CAAC,CAC3E,CAAC,CAACH,GAAG,CAAEG,EAAE,IAAK;IACZ,MAAMF,KAAK,GAAGN,MAAM,CAACS,IAAI,CAAEH,KAAK,IAAKA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;IACxE,OAAOF,KAAK,GAAGA,KAAK,CAACC,IAAI,GAAG;MAAEG,IAAI,EAAE,WAAW;MAAEF,EAAE,EAAE;IAAY,CAAC;EACpE,CAAC,CAAC;EAEF,MAAMG,WAAW,GAAGV,WAAW,CAACI,GAAG,CAAEE,IAAI,KAAM;IAC7CK,KAAK,EAAEL,IAAI,CAACG,IAAI;IAChBG,KAAK,EAAEN,IAAI,CAACC;EACd,CAAC,CAAC,CAAC;EAEH,MAAMM,cAAc,GAAG3B,OAAO,CAC5B,MACEa,MAAM,CAACe,MAAM,CAAET,KAAK,IAAK;IACvB,MAAMU,UAAU,GAAGV,KAAK,CAACW,KAAK,CAC3BC,WAAW,CAAC,CAAC,CACbC,QAAQ,CAAC1B,UAAU,CAACyB,WAAW,CAAC,CAAC,CAAC;IACrC,MAAME,SAAS,GACbzB,aAAa,CAAC0B,MAAM,KAAK,CAAC,IAC1B1B,aAAa,CAACc,IAAI,CAAEF,IAAI,IAAKA,IAAI,CAACM,KAAK,KAAKP,KAAK,CAACgB,MAAM,CAAC;IAC3D,MAAMC,aAAa,GAAGzB,aAAa,GAC/BD,cAAc,CAACsB,QAAQ,CAACb,KAAK,CAACE,EAAE,CAAC,GACjC,IAAI;IACR,OAAOQ,UAAU,IAAII,SAAS,IAAIG,aAAa;EACjD,CAAC,CAAC,EACJ,CAACvB,MAAM,EAAEP,UAAU,EAAEE,aAAa,EAAEE,cAAc,EAAEC,aAAa,CACnE,CAAC;EAED,OAAO;IACLa,WAAW;IACXlB,UAAU;IACVE,aAAa;IACbD,aAAa;IACbE,gBAAgB;IAChBG,gBAAgB;IAChBe;EACF,CAAC;AACH;AAACtB,EAAA,CA7CeD,eAAe;EAAA,QAI3BF,iBAAiB,EACAC,SAAS;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}