{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API } from \"../const/const\";\nexport function useGetsPhoto() {\n  _s();\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const getAlbumsLists = async () => {\n    return await Promise.all([axios.get(ALBUMS_API), axios.get(PHOTOS_API)]);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getPostList().then(_ref => {\n      let [albums, photos] = _ref;\n      const photosMap = _.groupBy(photos.data, \"albumId\");\n      const albumsWithPhotos = albums.data.map(album => {\n        return {\n          ...albums,\n          photo: photosMap[albums.albumId]\n        };\n      });\n      setAlbums(albumsWithPhotos);\n    }).catch(err => setError(true)).finally(() => setLoading(false));\n  }, []);\n  return {\n    albums\n  };\n  console.log(albums);\n}\n_s(useGetsPhoto, \"/aUlT6o3Q2zAjfTMACuAw4DnHOY=\");","map":{"version":3,"names":["axios","useState","ALBUMS_API","PHOTOS_API","useGetsPhoto","_s","albums","setAlbums","loading","setLoading","error","setError","getAlbumsLists","Promise","all","get","useEffect","getPostList","then","_ref","photos","photosMap","_","groupBy","data","albumsWithPhotos","map","album","photo","albumId","catch","err","finally","console","log"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useGetsPhoto.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API } from \"../const/const\";\n\nexport function useGetsPhoto() {\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const getAlbumsLists = async () => {\n    return await Promise.all([axios.get(ALBUMS_API), axios.get(PHOTOS_API)]);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getPostList()\n      .then(([albums, photos]) => {\n        const photosMap = _.groupBy(photos.data, \"albumId\");\n        const albumsWithPhotos = albums.data.map((album) => {\n          return {\n            ...albums,\n            photo: photosMap[albums.albumId],\n          };\n        });\n\n        setAlbums(albumsWithPhotos);\n      })\n      .catch((err) => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n  return { albums };\n  console.log(albums);\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAEvD,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,OAAO,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACd,KAAK,CAACe,GAAG,CAACb,UAAU,CAAC,EAAEF,KAAK,CAACe,GAAG,CAACZ,UAAU,CAAC,CAAC,CAAC;EAC1E,CAAC;EAEDa,SAAS,CAAC,MAAM;IACdP,UAAU,CAAC,IAAI,CAAC;IAChBQ,WAAW,CAAC,CAAC,CACVC,IAAI,CAACC,IAAA,IAAsB;MAAA,IAArB,CAACb,MAAM,EAAEc,MAAM,CAAC,GAAAD,IAAA;MACrB,MAAME,SAAS,GAAGC,CAAC,CAACC,OAAO,CAACH,MAAM,CAACI,IAAI,EAAE,SAAS,CAAC;MACnD,MAAMC,gBAAgB,GAAGnB,MAAM,CAACkB,IAAI,CAACE,GAAG,CAAEC,KAAK,IAAK;QAClD,OAAO;UACL,GAAGrB,MAAM;UACTsB,KAAK,EAAEP,SAAS,CAACf,MAAM,CAACuB,OAAO;QACjC,CAAC;MACH,CAAC,CAAC;MAEFtB,SAAS,CAACkB,gBAAgB,CAAC;IAC7B,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAKpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC9BqB,OAAO,CAAC,MAAMvB,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IAAEH;EAAO,CAAC;EACjB2B,OAAO,CAACC,GAAG,CAAC5B,MAAM,CAAC;AACrB;AAACD,EAAA,CA5BeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}