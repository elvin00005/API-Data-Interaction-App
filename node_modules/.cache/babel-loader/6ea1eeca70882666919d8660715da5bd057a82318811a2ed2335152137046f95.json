{"ast":null,"code":"import { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { usePosts } from \"../context/postsContext\";\nexport default function useSaveForm(_ref) {\n  let {\n    setEditedPost,\n    editedPost,\n    setPosts\n  } = _ref;\n  const saveData = async id => {\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map(post => post.id === id ? Object.assign({}, post, {\n          ...response.data,\n          user: {\n            ...post.user,\n            name: response.data.userName\n          }\n        }) : post);\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n        const updatedEditedPost = Object.assign({}, editedPost, {\n          userName: response.data.userName\n        });\n        console.log(\"updatedPosts\", updatedPosts);\n        setEditedPost(updatedEditedPost);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n  };\n  return {\n    saveData\n  };\n}","map":{"version":3,"names":["POST_API","toast","axios","usePosts","useSaveForm","_ref","setEditedPost","editedPost","setPosts","saveData","id","response","put","status","updatedPosts","posts","map","post","Object","assign","data","user","name","userName","success","updatedEditedPost","console","log","error"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useSaveForm.js"],"sourcesContent":["import { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\n\nimport { usePosts } from \"../context/postsContext\";\n\nexport default function useSaveForm({ setEditedPost, editedPost, setPosts }) {\n  const saveData = async (id) => {\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map((post) =>\n          post.id === id\n            ? Object.assign({}, post, {\n                ...response.data,\n                user: { ...post.user, name: response.data.userName },\n              })\n            : post\n        );\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n        const updatedEditedPost = Object.assign({}, editedPost, {\n          userName: response.data.userName,\n        });\n        console.log(\"updatedPosts\", updatedPosts);\n        setEditedPost(updatedEditedPost);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n  };\n\n  return { saveData };\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAA0C;EAAA,IAAzC;IAAEC,aAAa;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAAH,IAAA;EACzE,MAAMI,QAAQ,GAAG,MAAOC,EAAE,IAAK;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,GAAEZ,QAAS,IAAGU,EAAG,EAAC,EAAEH,UAAU,CAAC;MACjE,IAAII,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,YAAY,GAAGC,KAAK,CAACC,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACP,EAAE,KAAKA,EAAE,GACVQ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,IAAI,EAAE;UACtB,GAAGN,QAAQ,CAACS,IAAI;UAChBC,IAAI,EAAE;YAAE,GAAGJ,IAAI,CAACI,IAAI;YAAEC,IAAI,EAAEX,QAAQ,CAACS,IAAI,CAACG;UAAS;QACrD,CAAC,CAAC,GACFN,IACN,CAAC;QACDT,QAAQ,CAACM,YAAY,CAAC;QACtBb,KAAK,CAACuB,OAAO,CAAC,cAAc,CAAC;QAC7B,MAAMC,iBAAiB,GAAGP,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEZ,UAAU,EAAE;UACtDgB,QAAQ,EAAEZ,QAAQ,CAACS,IAAI,CAACG;QAC1B,CAAC,CAAC;QACFG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEb,YAAY,CAAC;QACzCR,aAAa,CAACmB,iBAAiB,CAAC;MAClC,CAAC,MAAM;QACLxB,KAAK,CAAC2B,KAAK,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd3B,KAAK,CAAC2B,KAAK,CAAC,mBAAmB,CAAC;IAClC;EACF,CAAC;EAED,OAAO;IAAEnB;EAAS,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}