{"ast":null,"code":"var _jsxFileName = \"/Users/elvin/Documents/practica/test/src/pages/Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport { toast } from \"react-hot-toast\";\nimport { Button } from \"react-bootstrap\";\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\nimport { PostCard } from \"../components/postComponents/PostCard\";\nimport useDownloadPosts from \"../utilities/hooks/useDownloadPosts\";\nimport useDownloadUsers from \"../utilities/hooks/useDownloadUsers\";\nimport useDownloadComments from \"../utilities/hooks/useDownloadComments\";\nimport styles from \"./Posts.module.scss\";\nimport { useDeletePost } from \"../utilities/hooks/useDeletePosts\";\nimport { useDeletePostsFromFavorites } from \"../utilities/hooks/useDeletePostsFromFavorites\";\nimport useSaveForm from \"../utilities/hooks/useSaveForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const {\n    posts,\n    setPosts\n  } = useDownloadPosts();\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] = useState(false);\n  const [isVisabilityModalOfDeleteCheckedPosts, setIsVisabilityModalOfDeleteCheckedPosts] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\"\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n  const {\n    deletePost\n  } = useDeletePost(setPosts);\n  const {\n    deletePostsFromFavorites\n  } = useDeletePostsFromFavorites(setPosts, setFavoritePosts, setSelectedPosts);\n  const {\n    saveData\n  } = useSaveForm({\n    setEditedPost,\n    editingPost,\n    setEditingPost,\n    editedPost,\n    posts,\n    setPosts\n  });\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts\n  } = usePagination({\n    posts\n  });\n  const handleEdit = post => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName\n    });\n  };\n  const handleSave = async () => {\n    saveData();\n  };\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    } else {\n      setFavoritePosts([]);\n    }\n  }, [selectedPosts]);\n  const handleDelete = async id => {\n    deletePost(id);\n  };\n  const handleButtonClick = postId => {\n    setSelectedPostId(postId);\n  };\n  const handleAddToFavorities = () => {\n    const currentFavoritePosts = JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [...new Set([...currentFavoritePosts, ...selectedPosts])];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n  const handleFavorite = postId => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter(id => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n  const handleDeleteFromFavorities = () => {\n    deletePostsFromFavorites(selectedPosts, favoritePosts);\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(ModalForDelete, {\n      id: selectedPostId,\n      isVisabilityModal: isVisabilityModal,\n      handleDelete: handleDelete,\n      setIsVisabilityModal: setIsVisabilityModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowAddToFavorites, {\n      handleAddToFavorities: handleAddToFavorities,\n      isVisabilityModalOfFavorities: isVisabilityModalOfFavorities,\n      setIsVisabilityModalOfFavorities: setIsVisabilityModalOfFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowByDeleteAllCheckedPosts, {\n      setIsVisabilityModalOfDeleteCheckedPosts: setIsVisabilityModalOfDeleteCheckedPosts,\n      isVisabilityModalOfDeleteCheckedPosts: isVisabilityModalOfDeleteCheckedPosts,\n      handleDeleteFromFavorities: handleDeleteFromFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n      postsPerPage: postsPerPage,\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: currentPosts.map(post => {\n        if (editingPost === post.id) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column bg-light p-3 m-1 rounded\",\n            children: /*#__PURE__*/_jsxDEV(FormForUpdatePost, {\n              editedPost: editedPost,\n              setEditedPost: setEditedPost,\n              handleSave: handleSave,\n              handleCancel: handleCancel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: post,\n          favoritePosts: favoritePosts,\n          selectedComments: selectedComments,\n          selectedPostForComments: selectedPostForComments,\n          selectedPosts: selectedPosts,\n          handleButtonClick: handleButtonClick,\n          handleEdit: handleEdit,\n          setSelectedPosts: setSelectedPosts,\n          handleFavorite: handleFavorite,\n          setIsVisabilityModal: setIsVisabilityModal\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), selectedPosts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center gap-5\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfDeleteCheckedPosts(true),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfFavorities(true),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      somethingPerPage: postsPerPage,\n      totalSomething: posts.length,\n      setCurrentPage: setCurrentPage,\n      currentPage: currentPage,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"BLDx37+H600pq0XIOIUCV3bol0s=\", false, function () {\n  return [useDownloadPosts, useDeletePost, useDeletePostsFromFavorites, useSaveForm, usePagination];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","Layout","toast","Button","Pagination","usePagination","ModalForDelete","FormForUpdatePost","ModalWindowAddToFavorites","ModalWindowByDeleteAllCheckedPosts","CheckBox","PostCard","useDownloadPosts","useDownloadUsers","useDownloadComments","styles","useDeletePost","useDeletePostsFromFavorites","useSaveForm","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","isVisabilityModal","setIsVisabilityModal","isVisabilityModalOfFavorities","setIsVisabilityModalOfFavorities","isVisabilityModalOfDeleteCheckedPosts","setIsVisabilityModalOfDeleteCheckedPosts","selectedPostId","setSelectedPostId","selectedComments","setSelectedComments","selectedPostForComments","setSelectedPostForComments","editingPost","setEditingPost","editedPost","setEditedPost","title","body","userName","favoritePosts","setFavoritePosts","selectedPosts","setSelectedPosts","deletePost","deletePostsFromFavorites","saveData","postsPerPage","changePage","setCurrentPage","currentPage","paginate","currentPosts","handleEdit","post","id","handleSave","handleCancel","savedFavorites","localStorage","getItem","JSON","parse","handleDelete","handleButtonClick","postId","handleAddToFavorities","currentFavoritePosts","newFavoritePosts","Set","setItem","stringify","success","handleFavorite","includes","filter","error","handleDeleteFromFavorities","children","fileName","_jsxFileName","lineNumber","columnNumber","className","container","map","length","onClick","somethingPerPage","totalSomething","_c","$RefreshReg$"],"sources":["/Users/elvin/Documents/practica/test/src/pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport { toast } from \"react-hot-toast\";\nimport { Button } from \"react-bootstrap\";\n\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\nimport { PostCard } from \"../components/postComponents/PostCard\";\nimport useDownloadPosts from \"../utilities/hooks/useDownloadPosts\";\nimport useDownloadUsers from \"../utilities/hooks/useDownloadUsers\";\nimport useDownloadComments from \"../utilities/hooks/useDownloadComments\";\n\nimport styles from \"./Posts.module.scss\";\nimport { useDeletePost } from \"../utilities/hooks/useDeletePosts\";\nimport { useDeletePostsFromFavorites } from \"../utilities/hooks/useDeletePostsFromFavorites\";\nimport useSaveForm from \"../utilities/hooks/useSaveForm\";\n\nconst Posts = () => {\n  const { posts, setPosts } = useDownloadPosts();\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] =\n    useState(false);\n  const [\n    isVisabilityModalOfDeleteCheckedPosts,\n    setIsVisabilityModalOfDeleteCheckedPosts,\n  ] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\",\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n  const { deletePost } = useDeletePost(setPosts);\n  const { deletePostsFromFavorites } = useDeletePostsFromFavorites(\n    setPosts,\n    setFavoritePosts,\n    setSelectedPosts\n  );\n  const { saveData } = useSaveForm({\n    setEditedPost,\n    editingPost,\n    setEditingPost,\n    editedPost,\n    posts,\n    setPosts,\n  });\n\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts,\n  } = usePagination({ posts });\n\n  const handleEdit = (post) => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName,\n    });\n  };\n\n  const handleSave = async () => {\n    saveData();\n  };\n\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem(\"favoritePosts\");\n    if (savedFavorites) {\n      setFavoritePosts(JSON.parse(savedFavorites));\n    } else {\n      setFavoritePosts([]);\n    }\n  }, [selectedPosts]);\n\n  const handleDelete = async (id) => {\n    deletePost(id);\n  };\n  const handleButtonClick = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleAddToFavorities = () => {\n    const currentFavoritePosts =\n      JSON.parse(localStorage.getItem(\"favoritePosts\")) || [];\n    const newFavoritePosts = [\n      ...new Set([...currentFavoritePosts, ...selectedPosts]),\n    ];\n    localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n    setFavoritePosts(newFavoritePosts);\n    toast.success(\"posts added to favorites!\");\n  };\n\n  const handleFavorite = (postId) => {\n    if (favoritePosts.includes(postId)) {\n      const newFavoritePosts = favoritePosts.filter((id) => id !== postId);\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.error(\" post deleted to favorites!\");\n    } else {\n      const newFavoritePosts = [...favoritePosts, postId];\n      setFavoritePosts(newFavoritePosts);\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(newFavoritePosts));\n      toast.success(\"post added to favorites!\");\n    }\n  };\n\n  const handleDeleteFromFavorities = () => {\n    deletePostsFromFavorites(selectedPosts, favoritePosts);\n  };\n\n  return (\n    <Layout>\n      <ModalForDelete\n        id={selectedPostId}\n        isVisabilityModal={isVisabilityModal}\n        handleDelete={handleDelete}\n        setIsVisabilityModal={setIsVisabilityModal}\n      />\n      <ModalWindowAddToFavorites\n        handleAddToFavorities={handleAddToFavorities}\n        isVisabilityModalOfFavorities={isVisabilityModalOfFavorities}\n        setIsVisabilityModalOfFavorities={setIsVisabilityModalOfFavorities}\n      />\n      <ModalWindowByDeleteAllCheckedPosts\n        setIsVisabilityModalOfDeleteCheckedPosts={\n          setIsVisabilityModalOfDeleteCheckedPosts\n        }\n        isVisabilityModalOfDeleteCheckedPosts={\n          isVisabilityModalOfDeleteCheckedPosts\n        }\n        handleDeleteFromFavorities={handleDeleteFromFavorities}\n      />\n      <CheckBox postsPerPage={postsPerPage} changePage={changePage} />\n      <div className={styles.container}>\n        {currentPosts.map((post) => {\n          if (editingPost === post.id) {\n            return (\n              <div\n                key={post.id}\n                className=\"d-flex flex-column bg-light p-3 m-1 rounded\"\n              >\n                <FormForUpdatePost\n                  editedPost={editedPost}\n                  setEditedPost={setEditedPost}\n                  handleSave={handleSave}\n                  handleCancel={handleCancel}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <PostCard\n              key={post.id}\n              post={post}\n              favoritePosts={favoritePosts}\n              selectedComments={selectedComments}\n              selectedPostForComments={selectedPostForComments}\n              selectedPosts={selectedPosts}\n              handleButtonClick={handleButtonClick}\n              handleEdit={handleEdit}\n              setSelectedPosts={setSelectedPosts}\n              handleFavorite={handleFavorite}\n              setIsVisabilityModal={setIsVisabilityModal}\n            />\n          );\n        })}\n      </div>\n      {selectedPosts.length > 0 && (\n        <div className=\"d-flex justify-content-center gap-5\">\n          <Button\n            onClick={() => setIsVisabilityModalOfDeleteCheckedPosts(true)}\n          >\n            Delete\n          </Button>\n          <Button onClick={() => setIsVisabilityModalOfFavorities(true)}>\n            Add\n          </Button>\n        </div>\n      )}\n\n      <Pagination\n        somethingPerPage={postsPerPage}\n        totalSomething={posts.length}\n        setCurrentPage={setCurrentPage}\n        currentPage={currentPage}\n        paginate={paginate}\n      />\n    </Layout>\n  );\n};\n\nexport default Posts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}