{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function usePagination(_ref) {\n  _s();\n  let {\n    posts = [],\n    users = []\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  const [currentPosts, setCurrentPosts] = useState([]);\n  useEffect(() => {\n    const lastIndexPost = currentPage * postsPerPage;\n    const firstIndexPost = lastIndexPost - postsPerPage;\n    const processedList = posts.map(post => {\n      const user = users.find(user => user.id === post.userId);\n      if (user) {\n        return {\n          ...post,\n          userId: user.name\n        };\n      }\n      return post;\n    });\n    setCurrentPosts(processedList.slice(firstIndexPost, lastIndexPost));\n  }, [posts, users, currentPage, postsPerPage]);\n  const paginate = number => setCurrentPage(number);\n  const changePage = value => {\n    setPostsPerPage(value);\n  };\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    currentPosts\n  };\n}\n_s(usePagination, \"6AJf/UcyByFYQJBKnmPUltxrz2U=\");","map":{"version":3,"names":["useEffect","useState","usePagination","_ref","_s","posts","users","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","currentPosts","setCurrentPosts","lastIndexPost","firstIndexPost","processedList","map","post","user","find","id","userId","name","slice","paginate","number","changePage","value"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/usePagination.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function usePagination({ posts = [], users = [] }) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  const [currentPosts, setCurrentPosts] = useState([]);\n\n  useEffect(() => {\n    const lastIndexPost = currentPage * postsPerPage;\n    const firstIndexPost = lastIndexPost - postsPerPage;\n    const processedList = posts.map((post) => {\n      const user = users.find((user) => user.id === post.userId);\n      if (user) {\n        return { ...post, userId: user.name };\n      }\n      return post;\n    });\n    setCurrentPosts(processedList.slice(firstIndexPost, lastIndexPost));\n  }, [posts, users, currentPage, postsPerPage]);\n\n  const paginate = (number) => setCurrentPage(number);\n  const changePage = (value) => {\n    setPostsPerPage(value);\n  };\n\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    currentPosts,\n  };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,KAAK,GAAG,EAAE;IAAEC,KAAK,GAAG;EAAG,CAAC,GAAAH,IAAA;EAC9D,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMa,aAAa,GAAGN,WAAW,GAAGE,YAAY;IAChD,MAAMK,cAAc,GAAGD,aAAa,GAAGJ,YAAY;IACnD,MAAMM,aAAa,GAAGV,KAAK,CAACW,GAAG,CAAEC,IAAI,IAAK;MACxC,MAAMC,IAAI,GAAGZ,KAAK,CAACa,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,IAAI,CAACI,MAAM,CAAC;MAC1D,IAAIH,IAAI,EAAE;QACR,OAAO;UAAE,GAAGD,IAAI;UAAEI,MAAM,EAAEH,IAAI,CAACI;QAAK,CAAC;MACvC;MACA,OAAOL,IAAI;IACb,CAAC,CAAC;IACFL,eAAe,CAACG,aAAa,CAACQ,KAAK,CAACT,cAAc,EAAED,aAAa,CAAC,CAAC;EACrE,CAAC,EAAE,CAACR,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEE,YAAY,CAAC,CAAC;EAE7C,MAAMe,QAAQ,GAAIC,MAAM,IAAKjB,cAAc,CAACiB,MAAM,CAAC;EACnD,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5BjB,eAAe,CAACiB,KAAK,CAAC;EACxB,CAAC;EAED,OAAO;IACLlB,YAAY;IACZD,cAAc;IACdD,WAAW;IACXiB,QAAQ;IACRE,UAAU;IACVf;EACF,CAAC;AACH;AAACP,EAAA,CA/BuBF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}