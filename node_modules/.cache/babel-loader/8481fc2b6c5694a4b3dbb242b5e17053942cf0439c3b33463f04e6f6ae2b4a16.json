{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nexport default function usePagination(_ref) {\n  _s();\n  let {\n    posts,\n    users\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  const lastIndexPost = currentPage * postsPerPage;\n  const firstIndexPost = lastIndexPost - postsPerPage;\n  const paginate = number => setCurrentPage(number);\n  const changePage = value => {\n    setPostsPerPage(value);\n  };\n  const processedList = posts.map(post => {\n    const user = users.find(user => user.id === post.userId);\n    if (user) {\n      return {\n        ...post,\n        userId: user.name\n      };\n    }\n    return post;\n  });\n  const currentPosts = processedList.slice(firstIndexPost, lastIndexPost);\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    processedList\n  };\n}\n_s(usePagination, \"8owLQEZAq5RRoRHgrQnOdE2I4b0=\");","map":{"version":3,"names":["React","useState","usePagination","_ref","_s","posts","users","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","lastIndexPost","firstIndexPost","paginate","number","changePage","value","processedList","map","post","user","find","id","userId","name","currentPosts","slice"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/usePagination.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function usePagination({ posts, users }) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  const lastIndexPost = currentPage * postsPerPage;\n  const firstIndexPost = lastIndexPost - postsPerPage;\n\n  const paginate = (number) => setCurrentPage(number);\n  const changePage = (value) => {\n    setPostsPerPage(value);\n  };\n  const processedList = posts.map((post) => {\n    const user = users.find((user) => user.id === post.userId);\n    if (user) {\n      return { ...post, userId: user.name };\n    }\n    return post;\n  });\n  const currentPosts = processedList.slice(firstIndexPost, lastIndexPost);\n\n  return {\n    postsPerPage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    changePage,\n    processedList,\n  };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,eAAe,SAASC,aAAaA,CAAAC,IAAA,EAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAH,IAAA;EACpD,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMU,aAAa,GAAGJ,WAAW,GAAGE,YAAY;EAChD,MAAMG,cAAc,GAAGD,aAAa,GAAGF,YAAY;EAEnD,MAAMI,QAAQ,GAAIC,MAAM,IAAKN,cAAc,CAACM,MAAM,CAAC;EACnD,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5BN,eAAe,CAACM,KAAK,CAAC;EACxB,CAAC;EACD,MAAMC,aAAa,GAAGZ,KAAK,CAACa,GAAG,CAAEC,IAAI,IAAK;IACxC,MAAMC,IAAI,GAAGd,KAAK,CAACe,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,IAAI,CAACI,MAAM,CAAC;IAC1D,IAAIH,IAAI,EAAE;MACR,OAAO;QAAE,GAAGD,IAAI;QAAEI,MAAM,EAAEH,IAAI,CAACI;MAAK,CAAC;IACvC;IACA,OAAOL,IAAI;EACb,CAAC,CAAC;EACF,MAAMM,YAAY,GAAGR,aAAa,CAACS,KAAK,CAACd,cAAc,EAAED,aAAa,CAAC;EAEvE,OAAO;IACLF,YAAY;IACZD,cAAc;IACdD,WAAW;IACXM,QAAQ;IACRE,UAAU;IACVE;EACF,CAAC;AACH;AAACb,EAAA,CA3BuBF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}