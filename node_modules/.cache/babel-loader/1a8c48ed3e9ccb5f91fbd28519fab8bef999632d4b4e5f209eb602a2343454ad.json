{"ast":null,"code":"var _s = $RefreshSig$();\nimport { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { usePosts } from \"../context/postsContext\";\nexport default function useSaveForm(_ref) {\n  _s();\n  let {\n    setEditedPost,\n    editedPost,\n    setPosts,\n    setIsEdit\n  } = _ref;\n  const {\n    method\n  } = usePosts();\n  console.log(posts);\n  const saveData = async id => {\n    console.log(\"id\", id);\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map(post => post.id === id ? response.data : post);\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n        setIsEdit(false);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  return {\n    saveData\n  };\n}\n_s(useSaveForm, \"0anSfTXQ+ncVQJOE+Q1ivohUqgc=\", false, function () {\n  return [usePosts];\n});","map":{"version":3,"names":["POST_API","toast","axios","usePosts","useSaveForm","_ref","_s","setEditedPost","editedPost","setPosts","setIsEdit","method","console","log","posts","saveData","id","response","put","status","updatedPosts","map","post","data","success","error","title","body","userName"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useSaveForm.js"],"sourcesContent":["import { POST_API } from \"../const/const\";\nimport { toast } from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { usePosts } from \"../context/postsContext\";\nexport default function useSaveForm({\n  setEditedPost,\n  editedPost,\n\n  setPosts,\n  setIsEdit,\n}) {\n  const { method } = usePosts();\n  console.log(posts);\n  const saveData = async (id) => {\n    console.log(\"id\", id);\n    try {\n      const response = await axios.put(`${POST_API}/${id}`, editedPost);\n\n      if (response.status === 200) {\n        const updatedPosts = posts.map((post) =>\n          post.id === id ? response.data : post\n        );\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n        setIsEdit(false);\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n  return { saveData };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAMhC;EAAAC,EAAA;EAAA,IANiC;IAClCC,aAAa;IACbC,UAAU;IAEVC,QAAQ;IACRC;EACF,CAAC,GAAAL,IAAA;EACC,MAAM;IAAEM;EAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC7BS,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;EAClB,MAAMC,QAAQ,GAAG,MAAOC,EAAE,IAAK;IAC7BJ,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEG,EAAE,CAAC;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,GAAElB,QAAS,IAAGgB,EAAG,EAAC,EAAER,UAAU,CAAC;MAEjE,IAAIS,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,YAAY,GAAGN,KAAK,CAACO,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACN,EAAE,KAAKA,EAAE,GAAGC,QAAQ,CAACM,IAAI,GAAGD,IACnC,CAAC;QACDb,QAAQ,CAACW,YAAY,CAAC;QACtBnB,KAAK,CAACuB,OAAO,CAAC,cAAc,CAAC;QAC7Bd,SAAS,CAAC,KAAK,CAAC;MAClB,CAAC,MAAM;QACLT,KAAK,CAACwB,KAAK,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdxB,KAAK,CAACwB,KAAK,CAAC,mBAAmB,CAAC;IAClC;IAEAlB,aAAa,CAAC;MAAEmB,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC,CAAC;EACtD,CAAC;EACD,OAAO;IAAEb;EAAS,CAAC;AACrB;AAACT,EAAA,CA/BuBF,WAAW;EAAA,QAOdD,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}