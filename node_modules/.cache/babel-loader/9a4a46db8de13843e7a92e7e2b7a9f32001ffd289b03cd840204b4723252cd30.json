{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API } from \"../const/const\";\nimport _ from \"lodash\";\nexport function useGetsPhoto() {\n  _s();\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const getAlbumsLists = async () => {\n    return await Promise.all([axios.get(ALBUMS_API), axios.get(PHOTOS_API)]);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getAlbumsLists().then(_ref => {\n      let [albums, photos] = _ref;\n      const photosMap = _.groupBy(photos.data, \"albumId\");\n      const albumsWithPhotos = albums.data.map(album => {\n        return {\n          ...album,\n          photo: photosMap[album.albumId]\n        };\n      });\n      setAlbums(albumsWithPhotos);\n    }).catch(err => setError(true)).finally(() => setLoading(false));\n  }, []);\n  return {\n    albums\n  };\n}\n_s(useGetsPhoto, \"/aUlT6o3Q2zAjfTMACuAw4DnHOY=\");","map":{"version":3,"names":["axios","useEffect","useState","ALBUMS_API","PHOTOS_API","_","useGetsPhoto","_s","albums","setAlbums","loading","setLoading","error","setError","getAlbumsLists","Promise","all","get","then","_ref","photos","photosMap","groupBy","data","albumsWithPhotos","map","album","photo","albumId","catch","err","finally"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useGetsPhoto.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { ALBUMS_API, PHOTOS_API } from \"../const/const\";\nimport _ from \"lodash\";\n\nexport function useGetsPhoto() {\n  const [albums, setAlbums] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const getAlbumsLists = async () => {\n    return await Promise.all([axios.get(ALBUMS_API), axios.get(PHOTOS_API)]);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getAlbumsLists()\n      .then(([albums, photos]) => {\n        const photosMap = _.groupBy(photos.data, \"albumId\");\n        const albumsWithPhotos = albums.data.map((album) => {\n          return {\n            ...album,\n            photo: photosMap[album.albumId],\n          };\n        });\n\n        setAlbums(albumsWithPhotos);\n      })\n      .catch((err) => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n  return { albums };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AACvD,OAAOC,CAAC,MAAM,QAAQ;AAEtB,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,OAAO,MAAMC,OAAO,CAACC,GAAG,CAAC,CAAChB,KAAK,CAACiB,GAAG,CAACd,UAAU,CAAC,EAAEH,KAAK,CAACiB,GAAG,CAACb,UAAU,CAAC,CAAC,CAAC;EAC1E,CAAC;EAEDH,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,IAAI,CAAC;IAChBG,cAAc,CAAC,CAAC,CACbI,IAAI,CAACC,IAAA,IAAsB;MAAA,IAArB,CAACX,MAAM,EAAEY,MAAM,CAAC,GAAAD,IAAA;MACrB,MAAME,SAAS,GAAGhB,CAAC,CAACiB,OAAO,CAACF,MAAM,CAACG,IAAI,EAAE,SAAS,CAAC;MACnD,MAAMC,gBAAgB,GAAGhB,MAAM,CAACe,IAAI,CAACE,GAAG,CAAEC,KAAK,IAAK;QAClD,OAAO;UACL,GAAGA,KAAK;UACRC,KAAK,EAAEN,SAAS,CAACK,KAAK,CAACE,OAAO;QAChC,CAAC;MACH,CAAC,CAAC;MAEFnB,SAAS,CAACe,gBAAgB,CAAC;IAC7B,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAKjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC9BkB,OAAO,CAAC,MAAMpB,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IAAEH;EAAO,CAAC;AACnB;AAACD,EAAA,CA3BeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}