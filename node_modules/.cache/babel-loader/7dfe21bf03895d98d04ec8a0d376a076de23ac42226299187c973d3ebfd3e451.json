{"ast":null,"code":"var _jsxFileName = \"/Users/elvin/Documents/practica/test/src/pages/Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport { toast } from \"react-hot-toast\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\nimport styles from \"./Posts.module.scss\";\nimport MyCard from \"../components/postComponents/MyCard\";\nimport { useFavoritePosts } from \"../utilities/hooks/useFavoritePosts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] = useState(false);\n  const [isVisabilityModalOfDeleteCheckedPosts, setIsVisabilityModalOfDeleteCheckedPosts] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\"\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n  const handleEdit = post => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName\n    });\n  };\n  const handleSave = async () => {\n    try {\n      const response = await axios.put(`https://jsonplaceholder.typicode.com/posts/${editingPost}`, editedPost);\n      if (response.status === 200) {\n        const updatedPosts = posts.map(post => post.id === editingPost ? response.data : post);\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n    setEditingPost(null);\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({\n      title: \"\",\n      body: \"\",\n      userName: \"\"\n    });\n  };\n  const {\n    // favoritePosts,\n    addPostToFavorites,\n    removePostFromFavorites,\n    addToFavorities\n  } = useFavoritePosts(selectedPosts);\n  // const { posts, deletePost } = useDeletePosts([]);\n\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts\n  } = usePagination({\n    users,\n    posts\n  });\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/posts\").then(res => setPosts(res.data));\n  }, []);\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/comments\").then(res => setComments(res.data));\n  }, []);\n  useEffect(() => {\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => setUsers(res.data));\n  }, []);\n\n  // const handleDelete = async (id) => {\n  //   deletePost(id);\n  // };\n\n  const handleButtonClick = postId => {\n    setSelectedPostId(postId);\n  };\n  const handleComment = postId => {\n    if (selectedPostForComments === postId) {\n      setSelectedPostForComments(null);\n      setSelectedComments([]);\n    } else {\n      const commentsForPost = comments.filter(comment => comment.postId === postId);\n      setSelectedComments(commentsForPost);\n      setSelectedPostForComments(postId);\n    }\n  };\n  const handleAddToFavorities = () => {\n    addToFavorities();\n  };\n  const handleAddToFavorite = postId => {\n    addFavorite(postId);\n  };\n  const handleDeleteFromFavorities = async () => {\n    const postsToDelete = [...selectedPosts];\n    const deleteRequests = postsToDelete.map(postId => axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`));\n    try {\n      await Promise.all(deleteRequests);\n      setPosts(posts.filter(post => !postsToDelete.includes(post.id)));\n      setFavoritePosts(favoritePosts.filter(postId => !postsToDelete.includes(postId)));\n      setSelectedPosts(selectedPosts.filter(postId => !postsToDelete.includes(postId)));\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(favoritePosts));\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(ModalForDelete, {\n      id: selectedPostId,\n      isVisabilityModal: isVisabilityModal,\n      handleDelete: handleDelete,\n      setIsVisabilityModal: setIsVisabilityModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowAddToFavorites, {\n      handleAddToFavorities: handleAddToFavorities,\n      isVisabilityModalOfFavorities: isVisabilityModalOfFavorities,\n      setIsVisabilityModalOfFavorities: setIsVisabilityModalOfFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWindowByDeleteAllCheckedPosts, {\n      setIsVisabilityModalOfDeleteCheckedPosts: setIsVisabilityModalOfDeleteCheckedPosts,\n      isVisabilityModalOfDeleteCheckedPosts: isVisabilityModalOfDeleteCheckedPosts,\n      handleDeleteFromFavorities: handleDeleteFromFavorities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n      postsPerPage: postsPerPage,\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: currentPosts.map(post => {\n        if (editingPost === post.id) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column bg-light p-3 m-1 rounded\",\n            children: /*#__PURE__*/_jsxDEV(FormForUpdatePost, {\n              editedPost: editedPost,\n              setEditedPost: setEditedPost,\n              handleSave: handleSave,\n              handleCancel: handleCancel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(MyCard, {\n          post: post,\n          favoritePosts: favoritePosts,\n          selectedComments: selectedComments,\n          selectedPostForComments: selectedPostForComments,\n          selectedPosts: selectedPosts,\n          handleButtonClick: handleButtonClick,\n          handleEdit: handleEdit,\n          setSelectedPosts: setSelectedPosts,\n          handleAddToFavorite: handleAddToFavorite,\n          handleComment: handleComment,\n          setIsVisabilityModal: setIsVisabilityModal\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), selectedPosts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center gap-5\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfDeleteCheckedPosts(true),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsVisabilityModalOfFavorities(true),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      somethingPerPage: postsPerPage,\n      totalSomething: posts.length,\n      setCurrentPage: setCurrentPage,\n      currentPage: currentPage,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"Hw7ndBbwCjAoq7wRlvlfpanEqS8=\", false, function () {\n  return [useFavoritePosts, usePagination];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","Layout","axios","Button","Pagination","usePagination","toast","ModalForDelete","FormForUpdatePost","ModalWindowAddToFavorites","ModalWindowByDeleteAllCheckedPosts","CheckBox","styles","MyCard","useFavoritePosts","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","users","setUsers","comments","setComments","isVisabilityModal","setIsVisabilityModal","isVisabilityModalOfFavorities","setIsVisabilityModalOfFavorities","isVisabilityModalOfDeleteCheckedPosts","setIsVisabilityModalOfDeleteCheckedPosts","selectedPostId","setSelectedPostId","selectedComments","setSelectedComments","selectedPostForComments","setSelectedPostForComments","editingPost","setEditingPost","editedPost","setEditedPost","title","body","userName","favoritePosts","setFavoritePosts","selectedPosts","setSelectedPosts","handleEdit","post","id","handleSave","response","put","status","updatedPosts","map","data","success","error","handleCancel","addPostToFavorites","removePostFromFavorites","addToFavorities","postsPerPage","changePage","setCurrentPage","currentPage","paginate","currentPosts","get","then","res","handleButtonClick","postId","handleComment","commentsForPost","filter","comment","handleAddToFavorities","handleAddToFavorite","addFavorite","handleDeleteFromFavorities","postsToDelete","deleteRequests","delete","Promise","all","includes","localStorage","setItem","JSON","stringify","children","handleDelete","fileName","_jsxFileName","lineNumber","columnNumber","className","container","length","onClick","somethingPerPage","totalSomething","_c","$RefreshReg$"],"sources":["/Users/elvin/Documents/practica/test/src/pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport Pagination from \"../components/pagination/Pagination\";\nimport usePagination from \"../utilities/hooks/usePagination\";\nimport { toast } from \"react-hot-toast\";\nimport ModalForDelete from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDelete\";\n\nimport FormForUpdatePost from \"../components/formForUpdatePost/FormForUpdatePost\";\nimport ModalWindowAddToFavorites from \"../components/modalsWindow/addToFavoritesWindow/ModalWindowAddToFavorites\";\nimport ModalWindowByDeleteAllCheckedPosts from \"../components/modalsWindow/modalWindowForDelete/ModalWindowByDeleteAllCheckedPosts\";\nimport CheckBox from \"../components/postComponents/CheckBox\";\n\nimport styles from \"./Posts.module.scss\";\nimport MyCard from \"../components/postComponents/MyCard\";\nimport { useFavoritePosts } from \"../utilities/hooks/useFavoritePosts\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [isVisabilityModal, setIsVisabilityModal] = useState(false);\n  const [isVisabilityModalOfFavorities, setIsVisabilityModalOfFavorities] =\n    useState(false);\n  const [\n    isVisabilityModalOfDeleteCheckedPosts,\n    setIsVisabilityModalOfDeleteCheckedPosts,\n  ] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [selectedComments, setSelectedComments] = useState([]);\n  const [selectedPostForComments, setSelectedPostForComments] = useState(null);\n  const [editingPost, setEditingPost] = useState(null);\n  const [editedPost, setEditedPost] = useState({\n    title: \"\",\n    body: \"\",\n    userName: \"\",\n  });\n  const [favoritePosts, setFavoritePosts] = useState([]);\n  const [selectedPosts, setSelectedPosts] = useState([]);\n\n  const handleEdit = (post) => {\n    setEditingPost(post.id);\n    setEditedPost({\n      title: post.title,\n      body: post.body,\n      userName: post.userName,\n    });\n  };\n\n  const handleSave = async () => {\n    try {\n      const response = await axios.put(\n        `https://jsonplaceholder.typicode.com/posts/${editingPost}`,\n        editedPost\n      );\n\n      if (response.status === 200) {\n        const updatedPosts = posts.map((post) =>\n          post.id === editingPost ? response.data : post\n        );\n        setPosts(updatedPosts);\n        toast.success(\"post updated\");\n      } else {\n        toast.error(\"post update error\");\n      }\n    } catch (error) {\n      toast.error(\"post update error\");\n    }\n\n    setEditingPost(null);\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  const handleCancel = () => {\n    setEditingPost(null);\n    setEditedPost({ title: \"\", body: \"\", userName: \"\" });\n  };\n\n  const {\n    // favoritePosts,\n    addPostToFavorites,\n    removePostFromFavorites,\n    addToFavorities,\n  } = useFavoritePosts(selectedPosts);\n  // const { posts, deletePost } = useDeletePosts([]);\n\n  const {\n    postsPerPage,\n    changePage,\n    setCurrentPage,\n    currentPage,\n    paginate,\n    currentPosts,\n  } = usePagination({ users, posts });\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then((res) => setPosts(res.data));\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/comments\")\n      .then((res) => setComments(res.data));\n  }, []);\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => setUsers(res.data));\n  }, []);\n\n  // const handleDelete = async (id) => {\n  //   deletePost(id);\n  // };\n\n  const handleButtonClick = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleComment = (postId) => {\n    if (selectedPostForComments === postId) {\n      setSelectedPostForComments(null);\n      setSelectedComments([]);\n    } else {\n      const commentsForPost = comments.filter(\n        (comment) => comment.postId === postId\n      );\n      setSelectedComments(commentsForPost);\n      setSelectedPostForComments(postId);\n    }\n  };\n\n  const handleAddToFavorities = () => {\n    addToFavorities();\n  };\n\n  const handleAddToFavorite = (postId) => {\n    addFavorite(postId);\n  };\n\n  const handleDeleteFromFavorities = async () => {\n    const postsToDelete = [...selectedPosts];\n\n    const deleteRequests = postsToDelete.map((postId) =>\n      axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n    );\n\n    try {\n      await Promise.all(deleteRequests);\n\n      setPosts(posts.filter((post) => !postsToDelete.includes(post.id)));\n\n      setFavoritePosts(\n        favoritePosts.filter((postId) => !postsToDelete.includes(postId))\n      );\n      setSelectedPosts(\n        selectedPosts.filter((postId) => !postsToDelete.includes(postId))\n      );\n\n      localStorage.setItem(\"favoritePosts\", JSON.stringify(favoritePosts));\n\n      toast.success(\"Selected posts removed\");\n    } catch (error) {\n      toast.error(\"Failed to delete some posts\");\n    }\n  };\n\n  return (\n    <Layout>\n      <ModalForDelete\n        id={selectedPostId}\n        isVisabilityModal={isVisabilityModal}\n        handleDelete={handleDelete}\n        setIsVisabilityModal={setIsVisabilityModal}\n      />\n      <ModalWindowAddToFavorites\n        handleAddToFavorities={handleAddToFavorities}\n        isVisabilityModalOfFavorities={isVisabilityModalOfFavorities}\n        setIsVisabilityModalOfFavorities={setIsVisabilityModalOfFavorities}\n      />\n      <ModalWindowByDeleteAllCheckedPosts\n        setIsVisabilityModalOfDeleteCheckedPosts={\n          setIsVisabilityModalOfDeleteCheckedPosts\n        }\n        isVisabilityModalOfDeleteCheckedPosts={\n          isVisabilityModalOfDeleteCheckedPosts\n        }\n        handleDeleteFromFavorities={handleDeleteFromFavorities}\n      />\n      <CheckBox postsPerPage={postsPerPage} changePage={changePage} />\n      <div className={styles.container}>\n        {currentPosts.map((post) => {\n          if (editingPost === post.id) {\n            return (\n              <div\n                key={post.id}\n                className=\"d-flex flex-column bg-light p-3 m-1 rounded\"\n              >\n                <FormForUpdatePost\n                  editedPost={editedPost}\n                  setEditedPost={setEditedPost}\n                  handleSave={handleSave}\n                  handleCancel={handleCancel}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <MyCard\n              key={post.id}\n              post={post}\n              favoritePosts={favoritePosts}\n              selectedComments={selectedComments}\n              selectedPostForComments={selectedPostForComments}\n              selectedPosts={selectedPosts}\n              handleButtonClick={handleButtonClick}\n              handleEdit={handleEdit}\n              setSelectedPosts={setSelectedPosts}\n              handleAddToFavorite={handleAddToFavorite}\n              handleComment={handleComment}\n              setIsVisabilityModal={setIsVisabilityModal}\n            />\n          );\n        })}\n      </div>\n      {selectedPosts.length > 0 && (\n        <div className=\"d-flex justify-content-center gap-5\">\n          <Button\n            onClick={() => setIsVisabilityModalOfDeleteCheckedPosts(true)}\n          >\n            Delete\n          </Button>\n          <Button onClick={() => setIsVisabilityModalOfFavorities(true)}>\n            Add\n          </Button>\n        </div>\n      )}\n\n      <Pagination\n        somethingPerPage={postsPerPage}\n        totalSomething={posts.length}\n        setCurrentPage={setCurrentPage}\n        currentPage={currentPage}\n        paginate={paginate}\n      />\n    </Layout>\n  );\n};\n\nexport default Posts;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,iBAAiB;AACxC,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,cAAc,MAAM,qEAAqE;AAEhG,OAAOC,iBAAiB,MAAM,mDAAmD;AACjF,OAAOC,yBAAyB,MAAM,2EAA2E;AACjH,OAAOC,kCAAkC,MAAM,oFAAoF;AACnI,OAAOC,QAAQ,MAAM,uCAAuC;AAE5D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qCAAqC;AACxD,SAASC,gBAAgB,QAAQ,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC2B,6BAA6B,EAAEC,gCAAgC,CAAC,GACrE5B,QAAQ,CAAC,KAAK,CAAC;EACjB,MAAM,CACJ6B,qCAAqC,EACrCC,wCAAwC,CACzC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACnB,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACiC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACmC,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAC5E,MAAM,CAACqC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACuC,UAAU,EAAEC,aAAa,CAAC,GAAGxC,QAAQ,CAAC;IAC3CyC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC8C,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMgD,UAAU,GAAIC,IAAI,IAAK;IAC3BX,cAAc,CAACW,IAAI,CAACC,EAAE,CAAC;IACvBV,aAAa,CAAC;MACZC,KAAK,EAAEQ,IAAI,CAACR,KAAK;MACjBC,IAAI,EAAEO,IAAI,CAACP,IAAI;MACfC,QAAQ,EAAEM,IAAI,CAACN;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC7B,8CAA6ChB,WAAY,EAAC,EAC3DE,UACF,CAAC;MAED,IAAIa,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,YAAY,GAAGpC,KAAK,CAACqC,GAAG,CAAEP,IAAI,IAClCA,IAAI,CAACC,EAAE,KAAKb,WAAW,GAAGe,QAAQ,CAACK,IAAI,GAAGR,IAC5C,CAAC;QACD7B,QAAQ,CAACmC,YAAY,CAAC;QACtBjD,KAAK,CAACoD,OAAO,CAAC,cAAc,CAAC;MAC/B,CAAC,MAAM;QACLpD,KAAK,CAACqD,KAAK,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdrD,KAAK,CAACqD,KAAK,CAAC,mBAAmB,CAAC;IAClC;IAEArB,cAAc,CAAC,IAAI,CAAC;IACpBE,aAAa,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC,CAAC;EACtD,CAAC;EAED,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzBtB,cAAc,CAAC,IAAI,CAAC;IACpBE,aAAa,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC,CAAC;EACtD,CAAC;EAED,MAAM;IACJ;IACAkB,kBAAkB;IAClBC,uBAAuB;IACvBC;EACF,CAAC,GAAGjD,gBAAgB,CAACgC,aAAa,CAAC;EACnC;;EAEA,MAAM;IACJkB,YAAY;IACZC,UAAU;IACVC,cAAc;IACdC,WAAW;IACXC,QAAQ;IACRC;EACF,CAAC,GAAGhE,aAAa,CAAC;IAAEgB,KAAK;IAAEF;EAAM,CAAC,CAAC;EAEnCpB,SAAS,CAAC,MAAM;IACdG,KAAK,CACFoE,GAAG,CAAC,4CAA4C,CAAC,CACjDC,IAAI,CAAEC,GAAG,IAAKpD,QAAQ,CAACoD,GAAG,CAACf,IAAI,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN1D,SAAS,CAAC,MAAM;IACdG,KAAK,CACFoE,GAAG,CAAC,+CAA+C,CAAC,CACpDC,IAAI,CAAEC,GAAG,IAAKhD,WAAW,CAACgD,GAAG,CAACf,IAAI,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EACN1D,SAAS,CAAC,MAAM;IACdG,KAAK,CACFoE,GAAG,CAAC,4CAA4C,CAAC,CACjDC,IAAI,CAAEC,GAAG,IAAKlD,QAAQ,CAACkD,GAAG,CAACf,IAAI,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA,MAAMgB,iBAAiB,GAAIC,MAAM,IAAK;IACpC1C,iBAAiB,CAAC0C,MAAM,CAAC;EAC3B,CAAC;EAED,MAAMC,aAAa,GAAID,MAAM,IAAK;IAChC,IAAIvC,uBAAuB,KAAKuC,MAAM,EAAE;MACtCtC,0BAA0B,CAAC,IAAI,CAAC;MAChCF,mBAAmB,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM;MACL,MAAM0C,eAAe,GAAGrD,QAAQ,CAACsD,MAAM,CACpCC,OAAO,IAAKA,OAAO,CAACJ,MAAM,KAAKA,MAClC,CAAC;MACDxC,mBAAmB,CAAC0C,eAAe,CAAC;MACpCxC,0BAA0B,CAACsC,MAAM,CAAC;IACpC;EACF,CAAC;EAED,MAAMK,qBAAqB,GAAGA,CAAA,KAAM;IAClChB,eAAe,CAAC,CAAC;EACnB,CAAC;EAED,MAAMiB,mBAAmB,GAAIN,MAAM,IAAK;IACtCO,WAAW,CAACP,MAAM,CAAC;EACrB,CAAC;EAED,MAAMQ,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7C,MAAMC,aAAa,GAAG,CAAC,GAAGrC,aAAa,CAAC;IAExC,MAAMsC,cAAc,GAAGD,aAAa,CAAC3B,GAAG,CAAEkB,MAAM,IAC9CxE,KAAK,CAACmF,MAAM,CAAE,8CAA6CX,MAAO,EAAC,CACrE,CAAC;IAED,IAAI;MACF,MAAMY,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;MAEjChE,QAAQ,CAACD,KAAK,CAAC0D,MAAM,CAAE5B,IAAI,IAAK,CAACkC,aAAa,CAACK,QAAQ,CAACvC,IAAI,CAACC,EAAE,CAAC,CAAC,CAAC;MAElEL,gBAAgB,CACdD,aAAa,CAACiC,MAAM,CAAEH,MAAM,IAAK,CAACS,aAAa,CAACK,QAAQ,CAACd,MAAM,CAAC,CAClE,CAAC;MACD3B,gBAAgB,CACdD,aAAa,CAAC+B,MAAM,CAAEH,MAAM,IAAK,CAACS,aAAa,CAACK,QAAQ,CAACd,MAAM,CAAC,CAClE,CAAC;MAEDe,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAAChD,aAAa,CAAC,CAAC;MAEpEtC,KAAK,CAACoD,OAAO,CAAC,wBAAwB,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdrD,KAAK,CAACqD,KAAK,CAAC,6BAA6B,CAAC;IAC5C;EACF,CAAC;EAED,oBACE3C,OAAA,CAACf,MAAM;IAAA4F,QAAA,gBACL7E,OAAA,CAACT,cAAc;MACb2C,EAAE,EAAEnB,cAAe;MACnBN,iBAAiB,EAAEA,iBAAkB;MACrCqE,YAAY,EAAEA,YAAa;MAC3BpE,oBAAoB,EAAEA;IAAqB;MAAAqE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFlF,OAAA,CAACP,yBAAyB;MACxBsE,qBAAqB,EAAEA,qBAAsB;MAC7CpD,6BAA6B,EAAEA,6BAA8B;MAC7DC,gCAAgC,EAAEA;IAAiC;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,eACFlF,OAAA,CAACN,kCAAkC;MACjCoB,wCAAwC,EACtCA,wCACD;MACDD,qCAAqC,EACnCA,qCACD;MACDqD,0BAA0B,EAAEA;IAA2B;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,eACFlF,OAAA,CAACL,QAAQ;MAACqD,YAAY,EAAEA,YAAa;MAACC,UAAU,EAAEA;IAAW;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChElF,OAAA;MAAKmF,SAAS,EAAEvF,MAAM,CAACwF,SAAU;MAAAP,QAAA,EAC9BxB,YAAY,CAACb,GAAG,CAAEP,IAAI,IAAK;QAC1B,IAAIZ,WAAW,KAAKY,IAAI,CAACC,EAAE,EAAE;UAC3B,oBACElC,OAAA;YAEEmF,SAAS,EAAC,6CAA6C;YAAAN,QAAA,eAEvD7E,OAAA,CAACR,iBAAiB;cAChB+B,UAAU,EAAEA,UAAW;cACvBC,aAAa,EAAEA,aAAc;cAC7BW,UAAU,EAAEA,UAAW;cACvBS,YAAY,EAAEA;YAAa;cAAAmC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B;UAAC,GARGjD,IAAI,CAACC,EAAE;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAST,CAAC;QAEV;QAEA,oBACElF,OAAA,CAACH,MAAM;UAELoC,IAAI,EAAEA,IAAK;UACXL,aAAa,EAAEA,aAAc;UAC7BX,gBAAgB,EAAEA,gBAAiB;UACnCE,uBAAuB,EAAEA,uBAAwB;UACjDW,aAAa,EAAEA,aAAc;UAC7B2B,iBAAiB,EAAEA,iBAAkB;UACrCzB,UAAU,EAAEA,UAAW;UACvBD,gBAAgB,EAAEA,gBAAiB;UACnCiC,mBAAmB,EAAEA,mBAAoB;UACzCL,aAAa,EAAEA,aAAc;UAC7BjD,oBAAoB,EAAEA;QAAqB,GAXtCuB,IAAI,CAACC,EAAE;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYb,CAAC;MAEN,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLpD,aAAa,CAACuD,MAAM,GAAG,CAAC,iBACvBrF,OAAA;MAAKmF,SAAS,EAAC,qCAAqC;MAAAN,QAAA,gBAClD7E,OAAA,CAACb,MAAM;QACLmG,OAAO,EAAEA,CAAA,KAAMxE,wCAAwC,CAAC,IAAI,CAAE;QAAA+D,QAAA,EAC/D;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlF,OAAA,CAACb,MAAM;QAACmG,OAAO,EAAEA,CAAA,KAAM1E,gCAAgC,CAAC,IAAI,CAAE;QAAAiE,QAAA,EAAC;MAE/D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,eAEDlF,OAAA,CAACZ,UAAU;MACTmG,gBAAgB,EAAEvC,YAAa;MAC/BwC,cAAc,EAAErF,KAAK,CAACkF,MAAO;MAC7BnC,cAAc,EAAEA,cAAe;MAC/BC,WAAW,EAAEA,WAAY;MACzBC,QAAQ,EAAEA;IAAS;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb,CAAC;AAAChF,EAAA,CAxOID,KAAK;EAAA,QAkELH,gBAAgB,EAUhBT,aAAa;AAAA;AAAAoG,EAAA,GA5EbxF,KAAK;AA0OX,eAAeA,KAAK;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}