{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport { useDeletePost } from \"./useDeletePost\";\nimport { COMMENT_API, POST_API, USER_API } from \"../const/const\";\nexport function useGetPosts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const {\n    deletePost\n  } = useDeletePost(setPosts);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  // const editUser = (id, data) => {\n  //   setPosts((prev) => {\n  //     return prev.map((post) => {\n  //       const { userName, ...rest } = data;\n  //       if (post.id === id) {\n  //         return { ...post, ...rest, user: { ...post.user, name: userName } };\n  //       }\n  //       return post;\n  //     });\n  //   });\n  // };\n\n  const getPostList = async () => {\n    return await Promise.all([axios.get(POST_API), axios.get(USER_API), axios.get(COMMENT_API)]);\n  };\n  useEffect(() => {\n    setLoading(true);\n    getPostList().then(_ref => {\n      let [posts, users, comments] = _ref;\n      const usersMap = _.keyBy(users.data, \"id\");\n      const commentsMap = _.groupBy(comments.data, \"postId\");\n      const postsWithCommentsAndUsers = posts.data.map(post => {\n        return {\n          ...post,\n          user: usersMap[post.userId],\n          comments: commentsMap[post.id]\n        };\n      });\n      setPosts(postsWithCommentsAndUsers);\n    }).catch(err => setError(true)).finally(() => setLoading(false));\n  }, []);\n  return {\n    posts,\n    setLoading,\n    error,\n    deletePost,\n    setPosts\n    // editUser,\n  };\n}\n_s(useGetPosts, \"34SZ7NOrU2vjv0aalj+jBYvVImk=\", false, function () {\n  return [useDeletePost];\n});","map":{"version":3,"names":["axios","useEffect","useState","_","useDeletePost","COMMENT_API","POST_API","USER_API","useGetPosts","_s","posts","setPosts","deletePost","loading","setLoading","error","setError","getPostList","Promise","all","get","then","_ref","users","comments","usersMap","keyBy","data","commentsMap","groupBy","postsWithCommentsAndUsers","map","post","user","userId","id","catch","err","finally"],"sources":["/Users/elvin/Documents/practica/test/src/utilities/hooks/useGetPosts.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport { useDeletePost } from \"./useDeletePost\";\nimport { COMMENT_API, POST_API, USER_API } from \"../const/const\";\n\nexport function useGetPosts() {\n  const [posts, setPosts] = useState([]);\n  const { deletePost } = useDeletePost(setPosts);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  // const editUser = (id, data) => {\n  //   setPosts((prev) => {\n  //     return prev.map((post) => {\n  //       const { userName, ...rest } = data;\n  //       if (post.id === id) {\n  //         return { ...post, ...rest, user: { ...post.user, name: userName } };\n  //       }\n  //       return post;\n  //     });\n  //   });\n  // };\n\n  const getPostList = async () => {\n    return await Promise.all([\n      axios.get(POST_API),\n      axios.get(USER_API),\n      axios.get(COMMENT_API),\n    ]);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    getPostList()\n      .then(([posts, users, comments]) => {\n        const usersMap = _.keyBy(users.data, \"id\");\n        const commentsMap = _.groupBy(comments.data, \"postId\");\n        const postsWithCommentsAndUsers = posts.data.map((post) => {\n          return {\n            ...post,\n            user: usersMap[post.userId],\n            comments: commentsMap[post.id],\n          };\n        });\n\n        setPosts(postsWithCommentsAndUsers);\n      })\n      .catch((err) => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return {\n    posts,\n    setLoading,\n    error,\n    deletePost,\n    setPosts,\n    // editUser,\n  };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,gBAAgB;AAEhE,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEU;EAAW,CAAC,GAAGR,aAAa,CAACO,QAAQ,CAAC;EAC9C,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,OAAO,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvBnB,KAAK,CAACoB,GAAG,CAACd,QAAQ,CAAC,EACnBN,KAAK,CAACoB,GAAG,CAACb,QAAQ,CAAC,EACnBP,KAAK,CAACoB,GAAG,CAACf,WAAW,CAAC,CACvB,CAAC;EACJ,CAAC;EAEDJ,SAAS,CAAC,MAAM;IACda,UAAU,CAAC,IAAI,CAAC;IAChBG,WAAW,CAAC,CAAC,CACVI,IAAI,CAACC,IAAA,IAA8B;MAAA,IAA7B,CAACZ,KAAK,EAAEa,KAAK,EAAEC,QAAQ,CAAC,GAAAF,IAAA;MAC7B,MAAMG,QAAQ,GAAGtB,CAAC,CAACuB,KAAK,CAACH,KAAK,CAACI,IAAI,EAAE,IAAI,CAAC;MAC1C,MAAMC,WAAW,GAAGzB,CAAC,CAAC0B,OAAO,CAACL,QAAQ,CAACG,IAAI,EAAE,QAAQ,CAAC;MACtD,MAAMG,yBAAyB,GAAGpB,KAAK,CAACiB,IAAI,CAACI,GAAG,CAAEC,IAAI,IAAK;QACzD,OAAO;UACL,GAAGA,IAAI;UACPC,IAAI,EAAER,QAAQ,CAACO,IAAI,CAACE,MAAM,CAAC;UAC3BV,QAAQ,EAAEI,WAAW,CAACI,IAAI,CAACG,EAAE;QAC/B,CAAC;MACH,CAAC,CAAC;MAEFxB,QAAQ,CAACmB,yBAAyB,CAAC;IACrC,CAAC,CAAC,CACDM,KAAK,CAAEC,GAAG,IAAKrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC9BsB,OAAO,CAAC,MAAMxB,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLJ,KAAK;IACLI,UAAU;IACVC,KAAK;IACLH,UAAU;IACVD;IACA;EACF,CAAC;AACH;AAACF,EAAA,CAtDeD,WAAW;EAAA,QAEFJ,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}